{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import*as FileSystem from'expo-file-system';import{Platform}from'@unimodules/core';import filenameFromUri from\"./filenameFromUri\";function isAssetLibraryUri(uri){return uri.toLowerCase().startsWith('assets-library://');}function isLocalUri(uri){return uri.toLowerCase().startsWith('file://');}function getHashAsync(uri){var _ref,md5;return _regeneratorRuntime.async(function getHashAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(uri,{md5:true}));case 2:_ref=_context.sent;md5=_ref.md5;return _context.abrupt(\"return\",md5);case 5:case\"end\":return _context.stop();}}});}function resolveLocalFileAsync(_ref2){var uri,name,hash;return _regeneratorRuntime.async(function resolveLocalFileAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:uri=_ref2.uri,name=_ref2.name;if(!(Platform.OS==='web')){_context2.next=3;break;}return _context2.abrupt(\"return\",{uri:uri,name:name,hash:null});case 3:_context2.next=5;return _regeneratorRuntime.awrap(getHashAsync(uri));case 5:hash=_context2.sent;if(hash){_context2.next=8;break;}return _context2.abrupt(\"return\",null);case 8:return _context2.abrupt(\"return\",{uri:uri,name:name,hash:hash});case 9:case\"end\":return _context2.stop();}}});}function fileInfoAsync(url,name){var localUri,hash,file,_ref3,uri,_hash;return _regeneratorRuntime.async(function fileInfoAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(url){_context3.next=3;break;}throw new Error('expo-asset-utils: fileInfoAsync(): cannot load from empty url!');case 3:name=name||filenameFromUri(url);if(!(Platform.OS==='web')){_context3.next=6;break;}return _context3.abrupt(\"return\",{uri:url,name:name,hash:null});case 6:localUri=FileSystem.cacheDirectory+name;if(!isAssetLibraryUri(url)){_context3.next=16;break;}_context3.next=10;return _regeneratorRuntime.awrap(FileSystem.copyAsync({from:url,to:localUri}));case 10:_context3.next=12;return _regeneratorRuntime.awrap(getHashAsync(localUri));case 12:hash=_context3.sent;return _context3.abrupt(\"return\",{uri:localUri,name:name,hash:hash});case 16:if(!isLocalUri(url)){_context3.next=30;break;}_context3.next=19;return _regeneratorRuntime.awrap(resolveLocalFileAsync({uri:url,name:name}));case 19:file=_context3.sent;if(file){_context3.next=27;break;}_context3.next=23;return _regeneratorRuntime.awrap(resolveLocalFileAsync({uri:localUri,name:name}));case 23:file=_context3.sent;if(file){_context3.next=27;break;}throw new Error(\"expo-asset-utils: fileInfoAsync(): couldn't resolve md5 hash for local uri: \"+url+\" or alternate: \"+localUri);case 27:return _context3.abrupt(\"return\",file);case 30:_context3.next=32;return _regeneratorRuntime.awrap(FileSystem.downloadAsync(url,localUri,{md5:true}));case 32:_ref3=_context3.sent;uri=_ref3.uri;_hash=_ref3.md5;return _context3.abrupt(\"return\",{uri:uri,name:name,hash:_hash});case 36:case\"end\":return _context3.stop();}}});}export default fileInfoAsync;","map":{"version":3,"sources":["/Users/gabew/Codelation-Projects/gabe-wilber.github.io/node_modules/expo-asset-utils/src/fileInfoAsync.js"],"names":["FileSystem","Platform","filenameFromUri","isAssetLibraryUri","uri","toLowerCase","startsWith","isLocalUri","getHashAsync","getInfoAsync","md5","resolveLocalFileAsync","name","OS","hash","fileInfoAsync","url","Error","localUri","cacheDirectory","copyAsync","from","to","file","downloadAsync"],"mappings":"4DACA,MAAO,GAAKA,CAAAA,UAAZ,KAA4B,kBAA5B,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,eAAP,yBAEA,QAASC,CAAAA,iBAAT,CAA2BC,GAA3B,CAAiD,CAC/C,MAAOA,CAAAA,GAAG,CAACC,WAAJ,GAAkBC,UAAlB,CAA6B,mBAA7B,CAAP,CACD,CAED,QAASC,CAAAA,UAAT,CAAoBH,GAApB,CAA0C,CACxC,MAAOA,CAAAA,GAAG,CAACC,WAAJ,GAAkBC,UAAlB,CAA6B,SAA7B,CAAP,CACD,CAED,QAAeE,CAAAA,YAAf,CAA4BJ,GAA5B,sLACwBJ,UAAU,CAACS,YAAX,CAAwBL,GAAxB,CAA6B,CAAEM,GAAG,CAAE,IAAP,CAA7B,CADxB,4BACUA,GADV,MACUA,GADV,iCAESA,GAFT,gDAWA,QAAeC,CAAAA,qBAAf,4JAAuCP,GAAvC,OAAuCA,GAAvC,CAA4CQ,IAA5C,OAA4CA,IAA5C,MACMX,QAAQ,CAACY,EAAT,GAAgB,KADtB,4DACoC,CAAET,GAAG,CAAHA,GAAF,CAAOQ,IAAI,CAAJA,IAAP,CAAaE,IAAI,CAAE,IAAnB,CADpC,2DAGqBN,YAAY,CAACJ,GAAD,CAHjC,SAGQU,IAHR,mBAIOA,IAJP,2DAKW,IALX,0CAOS,CAAEV,GAAG,CAAHA,GAAF,CAAOQ,IAAI,CAAJA,IAAP,CAAaE,IAAI,CAAJA,IAAb,CAPT,iDAUA,QAAeC,CAAAA,aAAf,CAA6BC,GAA7B,CAA2CJ,IAA3C,sKACOI,GADP,+BAEU,IAAIC,CAAAA,KAAJ,CAAU,gEAAV,CAFV,QAKEL,IAAI,CAAGA,IAAI,EAAIV,eAAe,CAACc,GAAD,CAA9B,CALF,KAOMf,QAAQ,CAACY,EAAT,GAAgB,KAPtB,4DAQW,CAAET,GAAG,CAAEY,GAAP,CAAYJ,IAAI,CAAJA,IAAZ,CAAkBE,IAAI,CAAE,IAAxB,CARX,SAWQI,QAXR,CAWmBlB,UAAU,CAACmB,cAAX,CAA4BP,IAX/C,KAaMT,iBAAiB,CAACa,GAAD,CAbvB,8EAeUhB,UAAU,CAACoB,SAAX,CAAqB,CACzBC,IAAI,CAAEL,GADmB,CAEzBM,EAAE,CAAEJ,QAFqB,CAArB,CAfV,6DAmBuBV,YAAY,CAACU,QAAD,CAnBnC,UAmBUJ,IAnBV,iDAoBW,CAAEV,GAAG,CAAEc,QAAP,CAAiBN,IAAI,CAAJA,IAAjB,CAAuBE,IAAI,CAAJA,IAAvB,CApBX,cAqBaP,UAAU,CAACS,GAAD,CArBvB,8EAuBqBL,qBAAqB,CAAC,CAAEP,GAAG,CAAEY,GAAP,CAAYJ,IAAI,CAAJA,IAAZ,CAAD,CAvB1C,UAuBQW,IAvBR,mBAwBSA,IAxBT,8EAyBmBZ,qBAAqB,CAAC,CAAEP,GAAG,CAAEc,QAAP,CAAiBN,IAAI,CAAJA,IAAjB,CAAD,CAzBxC,UAyBMW,IAzBN,mBA0BWA,IA1BX,gCA2Bc,IAAIN,CAAAA,KAAJ,gFAC2ED,GAD3E,mBACgGE,QADhG,CA3Bd,0CAiCWK,IAjCX,6DAoCqCvB,UAAU,CAACwB,aAAX,CAAyBR,GAAzB,CAA8BE,QAA9B,CAAwC,CACvER,GAAG,CAAE,IADkE,CAAxC,CApCrC,+BAoCYN,GApCZ,OAoCYA,GApCZ,CAoCsBU,KApCtB,OAoCiBJ,GApCjB,kCAuCW,CAAEN,GAAG,CAAHA,GAAF,CAAOQ,IAAI,CAAJA,IAAP,CAAaE,IAAI,CAAJA,KAAb,CAvCX,kDA0CA,cAAeC,CAAAA,aAAf","sourcesContent":["// @flow\nimport * as FileSystem from 'expo-file-system';\nimport { Platform } from '@unimodules/core';\nimport filenameFromUri from './filenameFromUri';\n\nfunction isAssetLibraryUri(uri: string): boolean {\n  return uri.toLowerCase().startsWith('assets-library://');\n}\n\nfunction isLocalUri(uri: string): boolean {\n  return uri.toLowerCase().startsWith('file://');\n}\n\nasync function getHashAsync(uri: string): Promise<string> {\n  const { md5 } = await FileSystem.getInfoAsync(uri, { md5: true });\n  return md5;\n}\n\nexport type ImageData = {\n  uri: string,\n  name: string,\n  hash?: string,\n};\n\nasync function resolveLocalFileAsync({ uri, name }: ImageData): Promise<ImageData> {\n  if (Platform.OS === 'web') return { uri, name, hash: null };\n\n  const hash = await getHashAsync(uri);\n  if (!hash) {\n    return null;\n  }\n  return { uri, name, hash };\n}\n\nasync function fileInfoAsync(url: ?string, name: string): Promise<ImageData> {\n  if (!url) {\n    throw new Error('expo-asset-utils: fileInfoAsync(): cannot load from empty url!');\n    return null;\n  }\n  name = name || filenameFromUri(url);\n\n  if (Platform.OS === 'web') {\n    return { uri: url, name, hash: null };\n  }\n\n  const localUri = FileSystem.cacheDirectory + name;\n\n  if (isAssetLibraryUri(url)) {\n    /// ios asset: we need to copy this over and then get the hash\n    await FileSystem.copyAsync({\n      from: url,\n      to: localUri,\n    });\n    const hash = await getHashAsync(localUri);\n    return { uri: localUri, name, hash };\n  } else if (isLocalUri(url)) {\n    /// local image: we just need the hash\n    let file = await resolveLocalFileAsync({ uri: url, name });\n    if (!file) {\n      file = await resolveLocalFileAsync({ uri: localUri, name });\n      if (!file) {\n        throw new Error(\n          `expo-asset-utils: fileInfoAsync(): couldn't resolve md5 hash for local uri: ${url} or alternate: ${localUri}`\n        );\n        return null;\n      }\n    }\n    return file;\n  } else {\n    /// remote image: download first\n    const { uri, md5: hash } = await FileSystem.downloadAsync(url, localUri, {\n      md5: true,\n    });\n    return { uri, name, hash };\n  }\n}\nexport default fileInfoAsync;\n"]},"metadata":{},"sourceType":"module"}