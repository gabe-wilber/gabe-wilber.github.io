{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";var _jsxFileName=\"/Users/brentvatne/coding/react-native-appearance/src/NativeAppearance.web.tsx\";import*as React from'react';import View from\"react-native-web/dist/exports/View\";import SyntheticPlatformEmitter from\"./web/SyntheticPlatformEmitter\";var query=window.matchMedia?window.matchMedia('(prefers-color-scheme: dark)'):null;function isMediaQueryList(query){return query&&query.addListener&&query.removeListener&&typeof query.matches==='boolean';}var colorScheme='no-preference';if(isMediaQueryList(query)){colorScheme=query.matches?'dark':'light';query.addListener(function(_ref){var matches=_ref.matches;var colorScheme=matches?'dark':'light';SyntheticPlatformEmitter.emit('appearanceChanged',{colorScheme:colorScheme});});}export var NativeAppearance={get name(){return'NativeAppearance';},get initialPreferences(){return{colorScheme:colorScheme};}};export var NativeAppearanceProvider=function NativeAppearanceProvider(props){return React.createElement(View,_extends({style:{flex:1}},props,{__source:{fileName:_jsxFileName,lineNumber:35}}));};","map":{"version":3,"sources":["NativeAppearance.web.tsx"],"names":["query","window","colorScheme","isMediaQueryList","matches","SyntheticPlatformEmitter","NativeAppearance","NativeAppearanceProvider","flex"],"mappings":"sJAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,qDAKA,MAAA,CAAA,wBAAA,sCAEA,GAAMA,CAAAA,KAAK,CAAGC,MAAM,CAANA,UAAAA,CAAoBA,MAAM,CAANA,UAAAA,CAApBA,8BAAoBA,CAApBA,CAAd,IAAA,CAEA,QAAA,CAAA,gBAAA,CAAA,KAAA,CAA+D,CAC7D,MAAOD,CAAAA,KAAK,EAAIA,KAAK,CAAdA,WAAAA,EAA8BA,KAAK,CAAnCA,cAAAA,EAAsD,MAAOA,CAAAA,KAAK,CAAZ,OAAA,GAA7D,SAAA,CAGF,IAAIE,CAAAA,WAA4B,CAAhC,eAAA,CAEA,GAAIC,gBAAgB,CAApB,KAAoB,CAApB,CAA6B,CAC3BD,WAAW,CAAGF,KAAK,CAALA,OAAAA,CAAAA,MAAAA,CAAdE,OAAAA,CACAF,KAAK,CAALA,WAAAA,CAAkB,SAAA,IAAA,CAAsB,CAAXI,GAAAA,CAAAA,OAAW,CAAA,IAAA,CAAXA,OAAAA,CAC3B,GAAMF,CAAAA,WAAW,CAAGE,OAAO,CAAA,MAAA,CAA3B,OAAA,CACAC,wBAAwB,CAAxBA,IAAAA,CAAAA,mBAAAA,CAAmD,CACjDH,WAAW,CADbG,WAAmD,CAAnDA,EAFFL,CAAAA,EAQF,OAAO,IAAMM,CAAAA,gBAAgB,CAAG,CAC9B,GAAA,CAAA,IAAA,EAAmB,CACjB,MAAA,kBAAA,CAF4B,CAAA,CAI9B,GAAA,CAAA,kBAAA,EAAgD,CAC9C,MAAO,CAAEJ,WAAW,CAApB,WAAO,CAAP,CALG,CAAyB,CAAzB,CASP,MAAO,IAAMK,CAAAA,wBAAwB,CAAxBA,QAAAA,CAAAA,wBAAAA,CAA2B,KAA3BA,CAA2B,CAAA,MAAgB,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAM,KAAK,CAAE,CAAEC,IAAI,CAAnB,CAAa,CAAb,CAAA,CAAA,KAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAhB,EAAgB,CAAA,CAAA,CAAA,CAAhB,CAAjC,CAAA","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { ColorSchemeName, AppearancePreferences } from './Appearance.types';\n\n// @ts-ignore\nimport SyntheticPlatformEmitter from './web/SyntheticPlatformEmitter';\n\nconst query = window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;\n\nfunction isMediaQueryList(query: any): query is MediaQueryList {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nlet colorScheme: ColorSchemeName = 'no-preference';\n\nif (isMediaQueryList(query)) {\n  colorScheme = query.matches ? 'dark' : 'light';\n  query.addListener(function({ matches }) {\n    const colorScheme = matches ? 'dark' : 'light';\n    SyntheticPlatformEmitter.emit('appearanceChanged', {\n      colorScheme,\n    });\n  });\n}\n\nexport const NativeAppearance = {\n  get name(): string {\n    return 'NativeAppearance';\n  },\n  get initialPreferences(): AppearancePreferences {\n    return { colorScheme };\n  },\n};\n\nexport const NativeAppearanceProvider = (props: any) => <View style={{ flex: 1 }} {...props} />;\n"]},"metadata":{},"sourceType":"module"}