{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{UnavailabilityError}from'@unimodules/core';export default{get name(){return'ExpoSharing';},isAvailableAsync:function isAvailableAsync(){return Promise.resolve(!!navigator.share);},shareAsync:function shareAsync(url){var options,sharingNavigator,_args=arguments;return _regeneratorRuntime.async(function shareAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:options=_args.length>1&&_args[1]!==undefined?_args[1]:{};sharingNavigator=navigator;if(!sharingNavigator.share){_context.next=8;break;}_context.next=5;return _regeneratorRuntime.awrap(sharingNavigator.share(_objectSpread({},options,{url:url})));case 5:return _context.abrupt(\"return\",_context.sent);case 8:throw new UnavailabilityError('navigator','share');case 9:case\"end\":return _context.stop();}}});}};","map":{"version":3,"sources":["../src/ExpoSharing.web.ts"],"names":[],"mappings":"25BAAA,OAAS,mBAAT,KAAoC,kBAApC,CAUA,cAAe,CACb,GAAI,CAAA,IAAJ,EAAQ,CACN,MAAO,aAAP,CACD,CAHY,CAIb,gBAJa,4BAIG,CACd,MAAO,CAAA,OAAO,CAAC,OAAR,CAAgB,CAAC,CAAE,SAAuB,CAAC,KAA3C,CAAP,CACD,CANY,CAOP,UAPO,qBAOI,GAPJ,mKAOiB,OAPjB,+CAOyC,EAPzC,CAQL,gBARK,CAQyB,SARzB,KAWP,gBAAgB,CAAC,KAXV,0EAYI,gBAAgB,CAAC,KAAjB,kBAA4B,OAA5B,EAAqC,GAAG,CAAH,GAArC,GAZJ,oEAcH,IAAI,CAAA,mBAAJ,CAAwB,WAAxB,CAAqC,OAArC,CAdG,gDAAf","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\ntype ShareOptions = { title?: string; text?: string; url?: string };\n\ntype NavigatorShare = (options: ShareOptions) => Promise<{}>;\n\ninterface Navigator {\n  share?: NavigatorShare;\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoSharing';\n  },\n  isAvailableAsync(): Promise<boolean> {\n    return Promise.resolve(!!(navigator as Navigator).share);\n  },\n  async shareAsync(url: string, options: ShareOptions = {}): Promise<{}> {\n    const sharingNavigator: Navigator = navigator as Navigator;\n\n    // NOTE: `navigator.share` is only available via HTTPS\n    if (sharingNavigator.share) {\n      return await sharingNavigator.share({ ...options, url });\n    } else {\n      throw new UnavailabilityError('navigator', 'share');\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}