{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import AssetUtils from'expo-asset-utils';import Platform from\"react-native-web/dist/exports/Platform\";import THREE from\"./Three\";function formatFromURI(uri){var isJPEG=uri.search(/\\.jpe?g($|\\?)/i)>0||uri.search(/^data:image\\/jpeg/)===0;return isJPEG?THREE.RGBFormat:THREE.RGBAFormat;}var ExpoTextureLoader=function(_THREE$TextureLoader){_inherits(ExpoTextureLoader,_THREE$TextureLoader);function ExpoTextureLoader(){_classCallCheck(this,ExpoTextureLoader);return _possibleConstructorReturn(this,_getPrototypeOf(ExpoTextureLoader).apply(this,arguments));}_createClass(ExpoTextureLoader,[{key:\"load\",value:function load(asset,onLoad,onProgress,onError){if(!asset){throw new Error('ExpoTHREE.TextureLoader.load(): Cannot parse a null asset');}var texture=new THREE.Texture();var loader=new THREE.ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);(function _callee(){var nativeAsset,parseAsset;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:parseAsset=function _ref(image){texture.image=image;texture.format=formatFromURI(nativeAsset.localUri);texture.needsUpdate=true;if(onLoad!==undefined){onLoad(texture);}};_context.next=3;return _regeneratorRuntime.awrap(AssetUtils.resolveAsync(asset));case 3:nativeAsset=_context.sent;if(Platform.OS==='web'){loader.load(nativeAsset.localUri,function(image){parseAsset(image);},onProgress,onError);}else{texture['isDataTexture']=true;texture.minFilter=THREE.LinearFilter;parseAsset({data:nativeAsset,width:nativeAsset.width,height:nativeAsset.height});}case 5:case\"end\":return _context.stop();}}});})();return texture;}}]);return ExpoTextureLoader;}(THREE.TextureLoader);export{ExpoTextureLoader as default};","map":{"version":3,"sources":["../src/TextureLoader.ts"],"names":[],"mappings":"+YAAA,MAAO,CAAA,UAAP,KAAuB,kBAAvB,C,6DAEA,MAAO,CAAA,KAAP,eAGA,QAAS,CAAA,aAAT,CAAuB,GAAvB,CAAkC,CAChC,GAAM,CAAA,MAAM,CACV,GAAG,CAAC,MAAJ,CAAW,gBAAX,EAA+B,CAA/B,EAAoC,GAAG,CAAC,MAAJ,CAAW,mBAAX,IAAoC,CAD1E,CAGA,MAAO,CAAA,MAAM,CAAG,KAAK,CAAC,SAAT,CAAqB,KAAK,CAAC,UAAxC,CACD,C,GAEoB,CAAA,iB,yTAEjB,K,CACA,M,CACA,U,CACA,O,CAAqC,CAErC,GAAI,CAAC,KAAL,CAAY,CACV,KAAM,IAAI,CAAA,KAAJ,CACJ,2DADI,CAAN,CAGD,CAED,GAAI,CAAA,OAAO,CAAG,GAAI,CAAA,KAAK,CAAC,OAAV,EAAd,CAEA,GAAM,CAAA,MAAM,CAAG,GAAI,CAAA,KAAK,CAAC,WAAV,CAAsB,KAAK,OAA3B,CAAf,CACA,MAAM,CAAC,cAAP,CAAsB,KAAK,WAA3B,EACA,MAAM,CAAC,OAAP,CAAe,KAAK,IAApB,EAEA,CAAC,mCAGU,UAHV,kHAGU,UAHV,eAGqB,KAHrB,CAG0B,CACvB,OAAO,CAAC,KAAR,CAAgB,KAAhB,CAGA,OAAO,CAAC,MAAR,CAAiB,aAAa,CAAC,WAAW,CAAC,QAAb,CAA9B,CACA,OAAO,CAAC,WAAR,CAAsB,IAAtB,CAEA,GAAI,MAAM,GAAK,SAAf,CAA0B,CACxB,MAAM,CAAC,OAAD,CAAN,CACD,CACF,CAbF,kDAC2B,UAAU,CAAC,YAAX,CAAwB,KAAxB,CAD3B,SACO,WADP,eAeC,GAAI,QAAQ,CAAC,EAAT,GAAgB,KAApB,CAA2B,CACzB,MAAM,CAAC,IAAP,CACE,WAAW,CAAC,QADd,CAEE,SAAA,KAAK,CAAG,CACN,UAAU,CAAC,KAAD,CAAV,CACD,CAJH,CAKE,UALF,CAME,OANF,EAQD,CATD,IASO,CACL,OAAO,CAAC,eAAD,CAAP,CAA2B,IAA3B,CACA,OAAO,CAAC,SAAR,CAAoB,KAAK,CAAC,YAA1B,CAEA,UAAU,CAAC,CACT,IAAI,CAAE,WADG,CAET,KAAK,CAAE,WAAW,CAAC,KAFV,CAGT,MAAM,CAAE,WAAW,CAAC,MAHX,CAAD,CAAV,CAKD,CAjCF,8CAAD,IAoCA,MAAO,CAAA,OAAP,CACD,C,+BAxD4C,KAAK,CAAC,a,SAAhC,iB","sourcesContent":["import AssetUtils from 'expo-asset-utils';\nimport { Platform } from 'react-native';\nimport THREE from './Three';\n\n// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\nfunction formatFromURI(uri: string) {\n  const isJPEG =\n    uri.search(/\\.jpe?g($|\\?)/i) > 0 || uri.search(/^data:image\\/jpeg/) === 0;\n\n  return isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;\n}\n\nexport default class ExpoTextureLoader extends THREE.TextureLoader {\n  load(\n    asset: any,\n    onLoad?: (texture: THREE.Texture) => void,\n    onProgress?: (event: ProgressEvent) => void,\n    onError?: (event: ErrorEvent) => void\n  ): THREE.Texture {\n    if (!asset) {\n      throw new Error(\n        'ExpoTHREE.TextureLoader.load(): Cannot parse a null asset'\n      );\n    }\n\n    let texture = new THREE.Texture();\n\n    const loader = new THREE.ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n\n    (async () => {\n      const nativeAsset = await AssetUtils.resolveAsync(asset);\n\n      function parseAsset(image) {\n        texture.image = image;\n\n        // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n        texture.format = formatFromURI(nativeAsset.localUri);\n        texture.needsUpdate = true;\n\n        if (onLoad !== undefined) {\n          onLoad(texture);\n        }\n      }\n\n      if (Platform.OS === 'web') {\n        loader.load(\n          nativeAsset.localUri,\n          image => {\n            parseAsset(image);\n          },\n          onProgress,\n          onError\n        );\n      } else {\n        texture['isDataTexture'] = true; // Forces passing to `gl.texImage2D(...)` verbatim\n        texture.minFilter = THREE.LinearFilter; // Pass-through non-power-of-two\n\n        parseAsset({\n          data: nativeAsset,\n          width: nativeAsset.width,\n          height: nativeAsset.height,\n        });\n      }\n    })();\n\n    return texture;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}