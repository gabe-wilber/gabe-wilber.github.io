{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{ObjectLoader,BufferGeometryLoader}from'three';function parseWithLoaderAsync(_ref){var json,assetProvider,loader;return _regeneratorRuntime.async(function parseWithLoaderAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:json=_ref.json,assetProvider=_ref.assetProvider,loader=_ref.loader;loader.setPath&&loader.setPath(assetProvider);return _context.abrupt(\"return\",loader.parse(json,assetProvider));case 3:case\"end\":return _context.stop();}}});}export default function parseAsync(_ref2){var json,format,assetProvider;return _regeneratorRuntime.async(function parseAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:json=_ref2.json,format=_ref2.format,assetProvider=_ref2.assetProvider;if(!format&&json.metadata&&json.metadata.type){format=json.metadata.type;}if(format){_context2.next=4;break;}throw new Error('ExpoTHREE.parseAsync(): Invalid null format provided');case 4:_context2.t0=format;_context2.next=_context2.t0==='clara'?7:_context2.t0==='object'?7:_context2.t0==='json'?7:_context2.t0==='blender'?7:_context2.t0==='buffer'?8:_context2.t0==='scene'?9:9;break;case 7:return _context2.abrupt(\"return\",parseWithLoaderAsync({json:json,assetProvider:assetProvider,loader:new ObjectLoader()}));case 8:return _context2.abrupt(\"return\",parseWithLoaderAsync({json:json,assetProvider:assetProvider,loader:new BufferGeometryLoader()}));case 9:throw new Error(\"ExpoTHREE.parseAsync(): \"+format+\" not supported.\");case 10:case\"end\":return _context2.stop();}}});}","map":{"version":3,"sources":["../src/parseAsync.ts"],"names":[],"mappings":"4DAAA,OAAS,YAAT,CAAuB,oBAAvB,KAAmD,OAAnD,CAEA,QAAe,CAAA,oBAAf,mKACE,IADF,MACE,IADF,CAEE,aAFF,MAEE,aAFF,CAGE,MAHF,MAGE,MAHF,CAKE,MAAM,CAAC,OAAP,EAAkB,MAAM,CAAC,OAAP,CAAe,aAAf,CAAlB,CALF,gCAMS,MAAM,CAAC,KAAP,CAAa,IAAb,CAAmB,aAAnB,CANT,gDAgBA,cAAe,SAAe,CAAA,UAAf,6JACb,IADa,OACb,IADa,CAEb,MAFa,OAEb,MAFa,CAGb,aAHa,OAGb,aAHa,CAKb,GAAI,CAAC,MAAD,EAAW,IAAI,CAAC,QAAhB,EAA4B,IAAI,CAAC,QAAL,CAAc,IAA9C,CAAoD,CAClD,MAAM,CAAG,IAAI,CAAC,QAAL,CAAc,IAAvB,CACD,CAPY,GASR,MATQ,+BAUL,IAAI,CAAA,KAAJ,CAAU,sDAAV,CAVK,qBAaL,MAbK,+BAcN,OAdM,kBAeN,QAfM,kBAgBN,MAhBM,kBAiBN,SAjBM,kBAuBN,QAvBM,kBA6BN,OA7BM,mDAkBF,oBAAoB,CAAC,CAC1B,IAAI,CAAJ,IAD0B,CAE1B,aAAa,CAAb,aAF0B,CAG1B,MAAM,CAAE,GAAI,CAAA,YAAJ,EAHkB,CAAD,CAlBlB,0CAwBF,oBAAoB,CAAC,CAC1B,IAAI,CAAJ,IAD0B,CAE1B,aAAa,CAAb,aAF0B,CAG1B,MAAM,CAAE,GAAI,CAAA,oBAAJ,EAHkB,CAAD,CAxBlB,cA+BH,IAAI,CAAA,KAAJ,4BAAqC,MAArC,mBA/BG","sourcesContent":["import { ObjectLoader, BufferGeometryLoader } from 'three';\n\nasync function parseWithLoaderAsync({\n  json,\n  assetProvider,\n  loader,\n}): Promise<any> {\n  loader.setPath && loader.setPath(assetProvider);\n  return loader.parse(json, assetProvider);\n}\n\ntype Parseable = {\n  json: any;\n  format?: string;\n  onProgress?: (...args: any[]) => any;\n  assetProvider: any;\n};\n\nexport default async function parseAsync({\n  json,\n  format,\n  assetProvider,\n}: Parseable): Promise<any> {\n  if (!format && json.metadata && json.metadata.type) {\n    format = json.metadata.type;\n  }\n\n  if (!format) {\n    throw new Error('ExpoTHREE.parseAsync(): Invalid null format provided');\n  }\n\n  switch (format) {\n    case 'clara':\n    case 'object':\n    case 'json':\n    case 'blender':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new ObjectLoader(),\n      });\n    case 'buffer':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new BufferGeometryLoader(),\n      });\n    case 'scene':\n    default:\n      throw new Error(`ExpoTHREE.parseAsync(): ${format} not supported.`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}