{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import Platform from\"react-native-web/dist/exports/Platform\";import View from\"react-native-web/dist/exports/View\";import{useSafeArea}from'react-native-safe-area-context';import GameContext from\"../context/GameContext\";function generateTextShadow(width){return Platform.select({web:{textShadow:\"-\"+width+\"px 0px 0px #000, \"+width+\"px 0px 0px #000, 0px -\"+width+\"px 0px #000, 0px \"+width+\"px 0px #000\"},default:{}});}var textShadow=generateTextShadow(4);var textShadowHighscore=generateTextShadow(2);export default function Score(_ref){var gameOver=_ref.gameOver,score=_ref.score,props=_objectWithoutProperties(_ref,[\"gameOver\",\"score\"]);var _React$useContext=React.useContext(GameContext),_React$useContext$hig=_React$useContext.highscore,highscore=_React$useContext$hig===void 0?0:_React$useContext$hig,setHighscore=_React$useContext.setHighscore;React.useEffect(function(){if(gameOver){if(score>highscore){setHighscore(score);}}},[gameOver]);var _useSafeArea=useSafeArea(),top=_useSafeArea.top,left=_useSafeArea.left;return React.createElement(View,{pointerEvents:\"none\",style:[styles.container,{top:Math.max(top,16),left:Math.max(left,8)}]},React.createElement(Text,{style:[styles.score,textShadow]},score),highscore>0&&React.createElement(Text,{style:[styles.highscore,textShadowHighscore]},\"TOP \",highscore));}var styles=StyleSheet.create({container:{position:'absolute'},score:{color:'white',fontFamily:'retro',fontSize:48,backgroundColor:'transparent'},highscore:{color:'yellow',fontFamily:'retro',fontSize:14,marginTop:4,letterSpacing:-0.1,backgroundColor:'transparent'}});","map":{"version":3,"sources":["/Users/gabew/Codelation-Projects/gabe-wilber.github.io/components/ScoreText.js"],"names":["React","useSafeArea","GameContext","generateTextShadow","width","Platform","select","web","textShadow","default","textShadowHighscore","Score","gameOver","score","props","useContext","highscore","setHighscore","useEffect","top","left","styles","container","Math","max","StyleSheet","create","position","color","fontFamily","fontSize","backgroundColor","marginTop","letterSpacing"],"mappings":"qFAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,wOAEA,OAASC,WAAT,KAA4B,gCAA5B,CACA,MAAOC,CAAAA,WAAP,8BAGA,QAASC,CAAAA,kBAAT,CAA4BC,KAA5B,CAAmC,CACjC,MAAQC,CAAAA,QAAQ,CAACC,MAAT,CAAgB,CAAEC,GAAG,CAAE,CAC7BC,UAAU,KAAMJ,KAAN,qBAA+BA,KAA/B,0BAA6DA,KAA7D,qBAAsFA,KAAtF,cADmB,CAAP,CAErBK,OAAO,CAAE,EAFY,CAAhB,CAAR,CAGD,CACD,GAAMD,CAAAA,UAAU,CAAGL,kBAAkB,CAAC,CAAD,CAArC,CACA,GAAMO,CAAAA,mBAAmB,CAAGP,kBAAkB,CAAC,CAAD,CAA9C,CACA,cAAe,SAASQ,CAAAA,KAAT,MAA8C,IAA7BC,CAAAA,QAA6B,MAA7BA,QAA6B,CAAnBC,KAAmB,MAAnBA,KAAmB,CAATC,KAAS,2EACnBd,KAAK,CAACe,UAAN,CAAiBb,WAAjB,CADmB,yCACnDc,SADmD,CACnDA,SADmD,gCACvC,CADuC,uBACpCC,YADoC,mBACpCA,YADoC,CAG3DjB,KAAK,CAACkB,SAAN,CAAgB,UAAM,CACpB,GAAIN,QAAJ,CAAc,CACZ,GAAIC,KAAK,CAAGG,SAAZ,CAAuB,CACrBC,YAAY,CAACJ,KAAD,CAAZ,CACD,CACF,CACF,CAND,CAMG,CAACD,QAAD,CANH,EAH2D,iBAYrCX,WAAW,EAZ0B,CAYnDkB,GAZmD,cAYnDA,GAZmD,CAY9CC,IAZ8C,cAY9CA,IAZ8C,CAc3D,MACE,qBAAC,IAAD,EAAM,aAAa,CAAC,MAApB,CAA2B,KAAK,CAAE,CAACC,MAAM,CAACC,SAAR,CAAmB,CAAEH,GAAG,CAAEI,IAAI,CAACC,GAAL,CAASL,GAAT,CAAc,EAAd,CAAP,CAA0BC,IAAI,CAAEG,IAAI,CAACC,GAAL,CAASJ,IAAT,CAAe,CAAf,CAAhC,CAAnB,CAAlC,EACE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAACC,MAAM,CAACR,KAAR,CAAeL,UAAf,CAAb,EAA0CK,KAA1C,CADF,CAEGG,SAAS,CAAG,CAAZ,EAAkB,oBAAC,IAAD,EAAM,KAAK,CAAE,CAACK,MAAM,CAACL,SAAR,CAAmBN,mBAAnB,CAAb,SAA2DM,SAA3D,CAFrB,CADF,CAMD,CAED,GAAMK,CAAAA,MAAM,CAAGI,UAAU,CAACC,MAAX,CAAkB,CAC/BJ,SAAS,CAAE,CACTK,QAAQ,CAAE,UADD,CADoB,CAK/Bd,KAAK,CAAE,CACLe,KAAK,CAAE,OADF,CAELC,UAAU,CAAE,OAFP,CAGLC,QAAQ,CAAE,EAHL,CAILC,eAAe,CAAE,aAJZ,CALwB,CAW/Bf,SAAS,CAAE,CACTY,KAAK,CAAE,QADE,CAETC,UAAU,CAAE,OAFH,CAGTC,QAAQ,CAAE,EAHD,CAITE,SAAS,CAAE,CAJF,CAKTC,aAAa,CAAE,CAAC,GALP,CAMTF,eAAe,CAAE,aANR,CAXoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text,Platform, View } from 'react-native';\nimport { useSafeArea } from 'react-native-safe-area-context';\nimport GameContext from '../context/GameContext';\n\n\nfunction generateTextShadow(width) {\n  return  Platform.select({ web: {\n    textShadow: `-${width}px 0px 0px #000, ${width}px 0px 0px #000, 0px -${width}px 0px #000, 0px ${width}px 0px #000`\n  }, default: {} });\n} \nconst textShadow = generateTextShadow(4)\nconst textShadowHighscore = generateTextShadow(2)\nexport default function Score({ gameOver, score, ...props }) {\n  const { highscore = 0, setHighscore } = React.useContext(GameContext)\n\n  React.useEffect(() => {\n    if (gameOver) {\n      if (score > highscore) {\n        setHighscore(score);\n      }\n    }\n  }, [gameOver])\n\n\n  const { top, left } = useSafeArea();\n\n  return (\n    <View pointerEvents=\"none\" style={[styles.container, { top: Math.max(top, 16), left: Math.max(left, 8) }]}>\n      <Text style={[styles.score, textShadow]}>{score}</Text>\n      {highscore > 0 && (<Text style={[styles.highscore, textShadowHighscore]}>TOP {highscore}</Text>)}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n  },\n  \n  score: {\n    color: 'white',\n    fontFamily: 'retro',\n    fontSize: 48,\n    backgroundColor: 'transparent',\n  },\n  highscore: {\n    color: 'yellow',\n    fontFamily: 'retro',\n    fontSize: 14,\n    marginTop: 4,\n    letterSpacing: -0.1,\n    backgroundColor: 'transparent',\n  }\n})"]},"metadata":{},"sourceType":"module"}