{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import{GLView}from'expo-gl';import React,{Component}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Vibration from\"react-native-web/dist/exports/Vibration\";import View from\"react-native-web/dist/exports/View\";import{useColorScheme}from'react-native-appearance';import useAppState from\"../src/hooks/useAppState\";import GestureRecognizer,{swipeDirections}from\"../components/GestureView\";import Score from\"../components/ScoreText\";import Engine from\"../src/GameEngine\";import State from\"../src/state\";import GameOverScreen from\"./GameOverScreen\";import HomeScreen from\"./HomeScreen\";import SettingsScreen from\"./SettingsScreen\";import GameContext from\"../context/GameContext\";var DEBUG_CAMERA_CONTROLS=false;var Game=function(_Component){_inherits(Game,_Component);function Game(){var _getPrototypeOf2;var _this;_classCallCheck(this,Game);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Game)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={ready:false,score:0,viewKey:0,gameState:State.Game.none,showSettings:false};_this.transitionScreensValue=new Animated.Value(1);_this.transitionToGamePlayingState=function(){Animated.timing(_this.transitionScreensValue,{toValue:0,duration:200,onComplete:function onComplete(_ref){var finished=_ref.finished;_this.engine.setupGame(_this.props.character);_this.engine.init();if(finished){Animated.timing(_this.transitionScreensValue,{toValue:1,duration:300}).start();}}}).start();};_this.updateWithGameState=function(gameState){if(!gameState)throw new Error('gameState cannot be undefined');if(gameState===_this.state.gameState){return;}var lastState=_this.state.gameState;_this.setState({gameState:gameState});_this.engine.gameState=gameState;var _State$Game=State.Game,playing=_State$Game.playing,gameOver=_State$Game.gameOver,paused=_State$Game.paused,none=_State$Game.none;switch(gameState){case playing:if(lastState===paused){_this.engine.unpause();}else if(lastState!==none){_this.transitionToGamePlayingState();}else{_this.engine._hero.stopIdle();_this.onSwipe(swipeDirections.SWIPE_UP);}break;case gameOver:break;case paused:_this.engine.pause();break;case none:if(lastState===gameOver){_this.transitionToGamePlayingState();}_this.newScore();break;default:break;}};_this.onScreenResize=function(_ref2){var window=_ref2.window;_this.engine.updateScale();};_this.newScore=function(){Vibration.cancel();_this.setState({score:0});_this.engine.init();};_this.onSwipe=function(gestureName){return _this.engine.moveWithDirection(gestureName);};_this.renderGame=function(){if(!_this.state.ready)return;return React.createElement(GestureView,{pointerEvents:DEBUG_CAMERA_CONTROLS?'none':undefined,onStartGesture:_this.engine.beginMoveWithDirection,onSwipe:_this.onSwipe},React.createElement(GLView,{style:{flex:1,height:'100%',overflow:'hidden'},onContextCreate:_this.engine._onGLContextCreate}));};_this.renderGameOver=function(){if(_this.state.gameState!==State.Game.gameOver){return null;}return React.createElement(View,{style:StyleSheet.absoluteFillObject},React.createElement(GameOverScreen,{showSettings:function showSettings(){_this.setState({showSettings:true});},setGameState:function setGameState(state){_this.updateWithGameState(state);}}));};_this.renderHomeScreen=function(){if(_this.state.gameState!==State.Game.none){return null;}return React.createElement(View,{style:StyleSheet.absoluteFillObject},React.createElement(HomeScreen,{onPlay:function onPlay(){_this.updateWithGameState(State.Game.playing);}}));};return _this;}_createClass(Game,[{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps,nextState){if(nextState.gameState&&nextState.gameState!==this.state.gameState){this.updateWithGameState(nextState.gameState,this.state.gameState);}if(this.engine&&nextProps.character!==this.props.character){this.engine._hero.setCharacter(nextProps.character);}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){cancelAnimationFrame(this.engine.raf);}},{key:\"componentDidMount\",value:function componentDidMount(){return _regeneratorRuntime.async(function componentDidMount$(_context){while(1){switch(_context.prev=_context.next){case 0:Dimensions.addEventListener('change',this.onScreenResize);case 1:case\"end\":return _context.stop();}}},null,this);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){Dimensions.removeEventListener('change',this.onScreenResize);}},{key:\"componentWillMount\",value:function componentWillMount(){var _this2=this;this.engine=new Engine();this.engine.onUpdateScore=function(position){if(_this2.state.score<position){_this2.setState({score:position});}};this.engine.onGameInit=function(){_this2.setState({score:0});};this.engine._isGameStateEnded=function(){return _this2.state.gameState!==State.Game.playing;};this.engine.onGameReady=function(){return _this2.setState({ready:true});};this.engine.onGameEnded=function(){_this2.setState({gameState:State.Game.gameOver});};this.engine.setupGame(this.props.character);this.engine.init();}},{key:\"renderSettingsScreen\",value:function renderSettingsScreen(){var _this3=this;return React.createElement(View,{style:StyleSheet.absoluteFillObject},React.createElement(SettingsScreen,{goBack:function goBack(){return _this3.setState({showSettings:false});}}));}},{key:\"render\",value:function render(){var _this$props=this.props,isDarkMode=_this$props.isDarkMode,isPaused=_this$props.isPaused;return React.createElement(View,{pointerEvents:\"box-none\",style:[StyleSheet.absoluteFill,{flex:1,position:'fixed',backgroundColor:'#87C6FF'},this.props.style]},React.createElement(Animated.View,{style:{flex:1,opacity:this.transitionScreensValue}},this.renderGame()),React.createElement(Score,{score:this.state.score,gameOver:this.state.gameState===State.Game.gameOver}),this.renderGameOver(),this.renderHomeScreen(),this.state.showSettings&&this.renderSettingsScreen(),isPaused&&React.createElement(View,{style:[StyleSheet.absoluteFill,{backgroundColor:'rgba(105, 201, 230, 0.8)',justifyContent:'center',alignItems:'center'}]}));}}]);return Game;}(Component);var GestureView=function GestureView(_ref3){var onStartGesture=_ref3.onStartGesture,_onSwipe=_ref3.onSwipe,props=_objectWithoutProperties(_ref3,[\"onStartGesture\",\"onSwipe\"]);var config={velocityThreshold:0.2,directionalOffsetThreshold:80};return React.createElement(GestureRecognizer,_extends({onResponderGrant:function onResponderGrant(){onStartGesture();},onSwipe:function onSwipe(direction){_onSwipe(direction);},config:config,onTap:function onTap(){_onSwipe(swipeDirections.SWIPE_UP);},style:{flex:1}},props));};function GameScreen(props){var scheme=useColorScheme();var _React$useContext=React.useContext(GameContext),character=_React$useContext.character;return React.createElement(Game,_extends({},props,{character:character,isDarkMode:scheme==='dark'}));}export default GameScreen;","map":{"version":3,"sources":["/Users/gabew/Codelation-Projects/gabe-wilber.github.io/screens/GameScreen.js"],"names":["GLView","React","Component","useColorScheme","useAppState","GestureRecognizer","swipeDirections","Score","Engine","State","GameOverScreen","HomeScreen","SettingsScreen","GameContext","DEBUG_CAMERA_CONTROLS","Game","state","ready","score","viewKey","gameState","none","showSettings","transitionScreensValue","Animated","Value","transitionToGamePlayingState","timing","toValue","duration","onComplete","finished","engine","setupGame","props","character","init","start","updateWithGameState","Error","lastState","setState","playing","gameOver","paused","unpause","_hero","stopIdle","onSwipe","SWIPE_UP","pause","newScore","onScreenResize","window","updateScale","Vibration","cancel","gestureName","moveWithDirection","renderGame","undefined","beginMoveWithDirection","flex","height","overflow","_onGLContextCreate","renderGameOver","StyleSheet","absoluteFillObject","renderHomeScreen","nextProps","nextState","setCharacter","cancelAnimationFrame","raf","Dimensions","addEventListener","removeEventListener","onUpdateScore","position","onGameInit","_isGameStateEnded","onGameReady","onGameEnded","isDarkMode","isPaused","absoluteFill","backgroundColor","style","opacity","renderSettingsScreen","justifyContent","alignItems","GestureView","onStartGesture","config","velocityThreshold","directionalOffsetThreshold","direction","GameScreen","scheme","useContext"],"mappings":"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","sourcesContent":["import { GLView } from 'expo-gl';\nimport React, { Component } from 'react';\nimport { Animated, Dimensions, StyleSheet, Vibration, View } from 'react-native';\nimport { useColorScheme } from 'react-native-appearance';\nimport useAppState from '../src/hooks/useAppState'\n\nimport GestureRecognizer, { swipeDirections } from '../components/GestureView';\nimport Score from '../components/ScoreText';\nimport Engine from '../src/GameEngine';\nimport State from '../src/state';\nimport GameOverScreen from './GameOverScreen';\nimport HomeScreen from './HomeScreen';\nimport SettingsScreen from './SettingsScreen';\nimport GameContext from '../context/GameContext';\n\nconst DEBUG_CAMERA_CONTROLS = false;\nclass Game extends Component {\n  /// Reserve State for UI related updates...\n  state = {\n    ready: false,\n    score: 0,\n    viewKey: 0,\n    gameState: State.Game.none,\n    showSettings: false\n    // gameState: State.Game.gameOver\n  };\n\n  transitionScreensValue = new Animated.Value(1);\n\n  componentWillReceiveProps(nextProps, nextState) {\n    if (nextState.gameState && (nextState.gameState !== this.state.gameState)) {\n      this.updateWithGameState(nextState.gameState, this.state.gameState);\n    }\n    if (this.engine && nextProps.character !== this.props.character) {\n      this.engine._hero.setCharacter(nextProps.character);\n    }\n    // if ((this.state.gameState === State.Game.playing || this.state.gameState === State.Game.paused) && nextProps.isPaused !== this.props.isPaused) {\n    //   this.setState({ gameState: nextProps.isPaused ? State.Game.paused : State.Game.playing })\n    // }\n    // if (nextProps.character.id !== this.props.character.id) {\n    //   (async () => {\n    //     this.world.remove(this._hero);\n    //     this._hero = this.hero.getNode(nextProps.character.id);\n    //     this.world.add(this._hero);\n    //     this._hero.position.set(0, groundLevel, startingRow);\n    //     this._hero.scale.set(1, 1, 1);\n    //     this.init();\n    //   })();\n    // }\n  }\n\n  transitionToGamePlayingState = () => {\n    Animated.timing(this.transitionScreensValue, {\n      toValue: 0,\n      duration: 200,\n      onComplete: ({ finished }) => {\n        this.engine.setupGame(this.props.character);\n        this.engine.init();\n\n        if (finished) {\n          Animated.timing(this.transitionScreensValue, {\n            toValue: 1,\n            duration: 300,\n          }).start();\n        }\n      },\n    }).start();\n  };\n\n  updateWithGameState = (gameState) => {\n    if (!gameState) throw new Error('gameState cannot be undefined')\n\n    if (gameState === this.state.gameState) {\n      return;\n    }\n    const lastState = this.state.gameState;\n\n    this.setState({ gameState });\n    this.engine.gameState = gameState;\n    const { playing, gameOver, paused, none } = State.Game;\n    switch (gameState) {\n      case playing:\n        if (lastState === paused) {\n          this.engine.unpause();\n        } else if (lastState !== none) {\n          this.transitionToGamePlayingState();\n        } else {\n          // Coming straight from the menu.\n          this.engine._hero.stopIdle();\n          this.onSwipe(swipeDirections.SWIPE_UP);\n        }\n\n        break;\n      case gameOver:\n        break;\n      case paused:\n        this.engine.pause();\n        break;\n      case none:\n        if (lastState === gameOver) {\n          this.transitionToGamePlayingState();\n        } \n        this.newScore();\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.engine.raf);\n  }\n\n  async componentDidMount() {\n    // AudioManager.sounds.bg_music.setVolumeAsync(0.05);\n    // await AudioManager.playAsync(\n    //   AudioManager.sounds.bg_music, true\n    // );\n\n    Dimensions.addEventListener('change', this.onScreenResize);\n  }\n\n  onScreenResize = ({ window }) => {\n    this.engine.updateScale();\n  };\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.onScreenResize);\n  }\n\n  componentWillMount() {\n    this.engine = new Engine();\n    // this.engine.hideShadows = this.hideShadows;\n    this.engine.onUpdateScore = position => {\n      if (this.state.score < position) {\n        this.setState({ score: position });\n      }\n    };\n    this.engine.onGameInit = () => {\n      this.setState({ score: 0 });\n    };\n    this.engine._isGameStateEnded = () => {\n      return this.state.gameState !== State.Game.playing;\n    };\n    this.engine.onGameReady = () => this.setState({ ready: true });\n    this.engine.onGameEnded = () => {\n      this.setState({ gameState: State.Game.gameOver });\n      // this.props.navigation.navigate('GameOver')\n    };\n    this.engine.setupGame(this.props.character);\n    this.engine.init();\n  }\n\n  newScore = () => {\n    Vibration.cancel();\n    // this.props.setGameState(State.Game.playing);\n    this.setState({ score: 0 });\n    this.engine.init();\n  };\n\n  onSwipe = gestureName => this.engine.moveWithDirection(gestureName);\n\n  renderGame = () => {\n    if (!this.state.ready) return;\n\n    return (\n      <GestureView\n        pointerEvents={DEBUG_CAMERA_CONTROLS ? 'none' : undefined}\n        onStartGesture={this.engine.beginMoveWithDirection}\n        onSwipe={this.onSwipe}\n      >\n        <GLView\n          style={{ flex: 1, height: '100%', overflow: 'hidden' }}\n          onContextCreate={this.engine._onGLContextCreate}\n        />\n      </GestureView>\n    );\n  };\n\n  renderGameOver = () => {\n    if (this.state.gameState !== State.Game.gameOver) {\n      return null;\n    }\n\n    return (\n      <View style={StyleSheet.absoluteFillObject}>\n        <GameOverScreen\n          showSettings={() => {\n            this.setState({ showSettings: true })\n          }}\n          setGameState={(state) => {\n            this.updateWithGameState(state);\n          }}\n        />\n      </View>\n    );\n  };\n\n  renderHomeScreen = () => {\n    if (this.state.gameState !== State.Game.none) {\n      return null;\n    }\n\n    return (\n      <View style={StyleSheet.absoluteFillObject}>\n        <HomeScreen\n          onPlay={() => {\n            this.updateWithGameState(State.Game.playing);\n          }}\n        />\n      </View>\n    );\n  };\n\n  renderSettingsScreen() {\n    return (\n      <View style={StyleSheet.absoluteFillObject}>\n        <SettingsScreen\n          goBack={() => this.setState({ showSettings: false })}\n        />\n      </View>\n    );\n  }\n\n  render() {\n    const { isDarkMode, isPaused } = this.props;\n\n    return (\n      <View\n        pointerEvents=\"box-none\"\n        style={[\n          StyleSheet.absoluteFill,\n          { flex: 1, position: 'fixed', backgroundColor: '#87C6FF' },\n          this.props.style,\n        ]}\n      >\n        <Animated.View\n          style={{ flex: 1, opacity: this.transitionScreensValue }}\n        >\n          {this.renderGame()}\n        </Animated.View>\n        <Score\n          score={this.state.score}\n          gameOver={this.state.gameState === State.Game.gameOver}\n        />\n        {this.renderGameOver()}\n\n        {this.renderHomeScreen()}\n\n        {this.state.showSettings && this.renderSettingsScreen()}\n\n        {isPaused && <View style={[StyleSheet.absoluteFill, { backgroundColor: 'rgba(105, 201, 230, 0.8)', justifyContent: 'center', alignItems: 'center'}]}/>}\n      </View>\n    );\n  }\n}\n\nconst GestureView = ({ onStartGesture, onSwipe, ...props }) => {\n  const config = {\n    velocityThreshold: 0.2,\n    directionalOffsetThreshold: 80,\n  };\n\n  return (\n    <GestureRecognizer\n      onResponderGrant={() => {\n        onStartGesture();\n      }}\n      onSwipe={direction => {\n        onSwipe(direction);\n      }}\n      config={config}\n      onTap={() => {\n        onSwipe(swipeDirections.SWIPE_UP);\n      }}\n      style={{ flex: 1 }}\n      {...props}\n    />\n  );\n};\n\nfunction GameScreen(props) {\n  const scheme = useColorScheme();\n  const { character } = React.useContext(GameContext)\n\n  // const appState = useAppState();\n\n  return <Game {...props} character={character} isDarkMode={scheme === 'dark'} />\n}\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}