{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useEffect,useState}from'react';import AppState from\"react-native-web/dist/exports/AppState\";import Platform from\"react-native-web/dist/exports/Platform\";import{AppStateStatus}from\"react-native-web/dist/index\";export default function useAppState(){var currentState=AppState.currentState;var _useState=useState(currentState),_useState2=_slicedToArray(_useState,2),appState=_useState2[0],setAppState=_useState2[1];function onChange(newState){setAppState(newState);}useEffect(function(){AppState.addEventListener('change',onChange);if(Platform.OS==='web'){window.onfocus=function(){return onChange('active');};window.onblur=function(){return onChange('background');};}return function(){AppState.removeEventListener('change',onChange);};});return appState;}","map":{"version":3,"sources":["/Users/gabew/Codelation-Projects/gabe-wilber.github.io/src/hooks/useAppState.js"],"names":["React","useEffect","useState","AppStateStatus","useAppState","currentState","AppState","appState","setAppState","onChange","newState","addEventListener","Platform","OS","window","onfocus","onblur","removeEventListener"],"mappings":"iEAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,C,iIAC6BC,c,mCAE7B,cAAe,SAASC,CAAAA,WAAT,EAAuB,CACpC,GAAMC,CAAAA,YAAY,CAAGC,QAAQ,CAACD,YAA9B,CADoC,cAEJH,QAAQ,CAACG,YAAD,CAFJ,wCAE7BE,QAF6B,eAEnBC,WAFmB,eAIpC,QAASC,CAAAA,QAAT,CAAkBC,QAAlB,CAA4C,CAC1CF,WAAW,CAACE,QAAD,CAAX,CACD,CAEDT,SAAS,CAAC,UAAM,CACdK,QAAQ,CAACK,gBAAT,CAA0B,QAA1B,CAAoCF,QAApC,EACA,GAAIG,QAAQ,CAACC,EAAT,GAAgB,KAApB,CAA2B,CACvBC,MAAM,CAACC,OAAP,CAAiB,iBAAMN,CAAAA,QAAQ,CAAC,QAAD,CAAd,EAAjB,CACAK,MAAM,CAACE,MAAP,CAAgB,iBAAMP,CAAAA,QAAQ,CAAC,YAAD,CAAd,EAAhB,CACH,CAED,MAAO,WAAM,CACXH,QAAQ,CAACW,mBAAT,CAA6B,QAA7B,CAAuCR,QAAvC,EACD,CAFD,CAGD,CAVQ,CAAT,CAYA,MAAOF,CAAAA,QAAP,CACD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { AppState, Platform, AppStateStatus } from 'react-native'\n\nexport default function useAppState() {\n  const currentState = AppState.currentState\n  const [appState, setAppState] = useState(currentState)\n\n  function onChange(newState: AppStateStatus) {\n    setAppState(newState)\n  }\n\n  useEffect(() => {\n    AppState.addEventListener('change', onChange)\n    if (Platform.OS === 'web') {\n        window.onfocus = () => onChange('active')\n        window.onblur = () => onChange('background')\n    }\n    \n    return () => {\n      AppState.removeEventListener('change', onChange)\n    }\n  })\n\n  return appState\n}\n"]},"metadata":{},"sourceType":"module"}