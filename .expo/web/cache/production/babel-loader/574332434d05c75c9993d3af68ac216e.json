{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import{Object3D}from'three';import ModelLoader from\"../../src/ModelLoader\";import{groundLevel}from\"../GameSettings\";export var Fill={empty:'empty',solid:'solid',random:'random'};var HAS_WALLS=true;var HAS_OBSTACLES=true;var HAS_VARIETY=true;var Grass=function(_Object3D){_inherits(Grass,_Object3D);function Grass(heroWidth,onCollide){var _this;_classCallCheck(this,Grass);_this=_possibleConstructorReturn(this,_getPrototypeOf(Grass).call(this));_this.active=false;_this.entities=[];_this.top=0.4;_this.generate=function(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Fill.random;_this.entities.map(function(val){_this.floor.remove(val.mesh);val=null;});_this.entities=[];_this.obstacleMap={};_this.treeGen(type);};_this.obstacleMap={};_this.addObstacle=function(x){var mesh;if(HAS_VARIETY){mesh=Math.random()<0.4?ModelLoader._boulder.getRandom():ModelLoader._tree.getRandom();}else{mesh=ModelLoader._tree.getRandom();}_this.obstacleMap[\"\"+(x|0)]={index:_this.entities.length};_this.entities.push({mesh:mesh});_this.floor.add(mesh);mesh.position.set(x,groundLevel,0);};_this.treeGen=function(type){var _rowCount=0;var count=Math.round(Math.random()*2)+1;for(var x=-3;x<12;x++){var _x=x-4;if(type===Fill.solid){_this.addObstacle(_x);continue;}if(HAS_WALLS){if(x>=9||x<=-1){_this.addObstacle(_x);continue;}}if(HAS_OBSTACLES){if(_rowCount<count){if(_x!==0&&Math.random()>0.6){_this.addObstacle(_x);_rowCount++;}}}}};_this.onCollide=onCollide;var _grass=ModelLoader._grass;_this.floor=_grass.getNode();_this.add(_this.floor);return _this;}return Grass;}(Object3D);export{Grass as default};","map":{"version":3,"sources":["/Users/gabew/Codelation-Projects/gabe-wilber.github.io/src/Row/Grass.js"],"names":["Object3D","ModelLoader","groundLevel","Fill","empty","solid","random","HAS_WALLS","HAS_OBSTACLES","HAS_VARIETY","Grass","heroWidth","onCollide","active","entities","top","generate","type","map","val","floor","remove","mesh","obstacleMap","treeGen","addObstacle","x","Math","_boulder","getRandom","_tree","index","length","push","add","position","set","_rowCount","count","round","_x","_grass","getNode"],"mappings":"sRAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA,MAAOC,CAAAA,WAAP,6BACA,OAASC,WAAT,uBAEA,MAAO,IAAMC,CAAAA,IAAI,CAAG,CAClBC,KAAK,CAAE,OADW,CAElBC,KAAK,CAAE,OAFW,CAGlBC,MAAM,CAAE,QAHU,CAAb,CAMP,GAAMC,CAAAA,SAAS,CAAG,IAAlB,CACA,GAAMC,CAAAA,aAAa,CAAG,IAAtB,CACA,GAAMC,CAAAA,WAAW,CAAG,IAApB,C,GAEqBC,CAAAA,K,gDAyEnB,eAAYC,SAAZ,CAAuBC,SAAvB,CAAkC,uCAChC,yEADgC,MAxElCC,MAwEkC,CAxEzB,KAwEyB,OAvElCC,QAuEkC,CAvEvB,EAuEuB,OArElCC,GAqEkC,CArE5B,GAqE4B,OAzDlCC,QAyDkC,CAzDvB,UAAwB,IAAvBC,CAAAA,IAAuB,2DAAhBd,IAAI,CAACG,MAAW,CACjC,MAAKQ,QAAL,CAAcI,GAAd,CAAkB,SAAAC,GAAG,CAAI,CACvB,MAAKC,KAAL,CAAWC,MAAX,CAAkBF,GAAG,CAACG,IAAtB,EACAH,GAAG,CAAG,IAAN,CACD,CAHD,EAIA,MAAKL,QAAL,CAAgB,EAAhB,CACA,MAAKS,WAAL,CAAmB,EAAnB,CACA,MAAKC,OAAL,CAAaP,IAAb,EACD,CAiDiC,OA/ClCM,WA+CkC,CA/CpB,EA+CoB,OA9ClCE,WA8CkC,CA9CpB,SAAAC,CAAC,CAAI,CACjB,GAAIJ,CAAAA,IAAJ,CACA,GAAIb,WAAJ,CAAiB,CACfa,IAAI,CACFK,IAAI,CAACrB,MAAL,GAAgB,GAAhB,CACIL,WAAW,CAAC2B,QAAZ,CAAqBC,SAArB,EADJ,CAEI5B,WAAW,CAAC6B,KAAZ,CAAkBD,SAAlB,EAHN,CAID,CALD,IAKO,CACLP,IAAI,CAAGrB,WAAW,CAAC6B,KAAZ,CAAkBD,SAAlB,EAAP,CACD,CACD,MAAKN,WAAL,KAAoBG,CAAC,CAAG,CAAxB,GAA+B,CAAEK,KAAK,CAAE,MAAKjB,QAAL,CAAckB,MAAvB,CAA/B,CACA,MAAKlB,QAAL,CAAcmB,IAAd,CAAmB,CAAEX,IAAI,CAAJA,IAAF,CAAnB,EACA,MAAKF,KAAL,CAAWc,GAAX,CAAeZ,IAAf,EACAA,IAAI,CAACa,QAAL,CAAcC,GAAd,CAAkBV,CAAlB,CAAqBxB,WAArB,CAAkC,CAAlC,EACD,CAgCiC,OA9BlCsB,OA8BkC,CA9BxB,SAAAP,IAAI,CAAI,CAEhB,GAAIoB,CAAAA,SAAS,CAAG,CAAhB,CACA,GAAMC,CAAAA,KAAK,CAAGX,IAAI,CAACY,KAAL,CAAWZ,IAAI,CAACrB,MAAL,GAAgB,CAA3B,EAAgC,CAA9C,CACA,IAAK,GAAIoB,CAAAA,CAAC,CAAG,CAAC,CAAd,CAAiBA,CAAC,CAAG,EAArB,CAAyBA,CAAC,EAA1B,CAA8B,CAC5B,GAAMc,CAAAA,EAAE,CAAGd,CAAC,CAAG,CAAf,CACA,GAAIT,IAAI,GAAKd,IAAI,CAACE,KAAlB,CAAyB,CACvB,MAAKoB,WAAL,CAAiBe,EAAjB,EACA,SACD,CAED,GAAIjC,SAAJ,CAAe,CAEb,GAAImB,CAAC,EAAI,CAAL,EAAUA,CAAC,EAAI,CAAC,CAApB,CAAuB,CACrB,MAAKD,WAAL,CAAiBe,EAAjB,EACA,SACD,CACF,CAED,GAAIhC,aAAJ,CAAmB,CACjB,GAAI6B,SAAS,CAAGC,KAAhB,CAAuB,CACrB,GAAIE,EAAE,GAAK,CAAP,EAAYb,IAAI,CAACrB,MAAL,GAAgB,GAAhC,CAAqC,CACnC,MAAKmB,WAAL,CAAiBe,EAAjB,EACAH,SAAS,GACV,CACF,CACF,CACF,CACF,CAEiC,CAEhC,MAAKzB,SAAL,CAAiBA,SAAjB,CAFgC,GAGxB6B,CAAAA,MAHwB,CAGbxC,WAHa,CAGxBwC,MAHwB,CAKhC,MAAKrB,KAAL,CAAaqB,MAAM,CAACC,OAAP,EAAb,CACA,MAAKR,GAAL,CAAS,MAAKd,KAAd,EANgC,aAOjC,C,eAhFgCpB,Q,SAAdU,K","sourcesContent":["import { Object3D } from 'three';\n\nimport ModelLoader from '../../src/ModelLoader';\nimport { groundLevel } from '../GameSettings';\n\nexport const Fill = {\n  empty: 'empty',\n  solid: 'solid',\n  random: 'random',\n};\n\nconst HAS_WALLS = true;\nconst HAS_OBSTACLES = true;\nconst HAS_VARIETY = true;\n\nexport default class Grass extends Object3D {\n  active = false;\n  entities = [];\n\n  top = 0.4;\n  /*\n\n* Build Walls\n\n* Random Fill Center\n* Solid Fill Center\n* Empty Fill Center\n\n\n*/\n\n  generate = (type = Fill.random) => {\n    this.entities.map(val => {\n      this.floor.remove(val.mesh);\n      val = null;\n    });\n    this.entities = [];\n    this.obstacleMap = {};\n    this.treeGen(type);\n  };\n\n  obstacleMap = {};\n  addObstacle = x => {\n    let mesh;\n    if (HAS_VARIETY) {\n      mesh =\n        Math.random() < 0.4\n          ? ModelLoader._boulder.getRandom()\n          : ModelLoader._tree.getRandom();\n    } else {\n      mesh = ModelLoader._tree.getRandom();\n    }\n    this.obstacleMap[`${x | 0}`] = { index: this.entities.length };\n    this.entities.push({ mesh });\n    this.floor.add(mesh);\n    mesh.position.set(x, groundLevel, 0);\n  };\n\n  treeGen = type => {\n    // 0 - 8\n    let _rowCount = 0;\n    const count = Math.round(Math.random() * 2) + 1;\n    for (let x = -3; x < 12; x++) {\n      const _x = x - 4;\n      if (type === Fill.solid) {\n        this.addObstacle(_x);\n        continue;\n      }\n\n      if (HAS_WALLS) {\n        /// Walls\n        if (x >= 9 || x <= -1) {\n          this.addObstacle(_x);\n          continue;\n        }\n      }\n\n      if (HAS_OBSTACLES) {\n        if (_rowCount < count) {\n          if (_x !== 0 && Math.random() > 0.6) {\n            this.addObstacle(_x);\n            _rowCount++;\n          }\n        }\n      }\n    }\n  };\n\n  constructor(heroWidth, onCollide) {\n    super();\n    this.onCollide = onCollide;\n    const { _grass } = ModelLoader;\n\n    this.floor = _grass.getNode();\n    this.add(this.floor);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}