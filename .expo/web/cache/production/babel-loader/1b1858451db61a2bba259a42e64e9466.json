{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import Platform from\"react-native-web/dist/exports/Platform\";import{readAsStringAsync}from'expo-file-system';import THREE from\"../Three\";export default function readFromFileSystemAsStringAsync(localUri){var loader,message;return _regeneratorRuntime.async(function readFromFileSystemAsStringAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(global.__expo_three_log_loading){console.time('loadAsset');}if(!(Platform.OS==='web')){_context2.next=4;break;}loader=new THREE.FileLoader();return _context2.abrupt(\"return\",new Promise(function(resolve,reject){return loader.load(localUri,function _callee(value){return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=resolve;_context.next=3;return _regeneratorRuntime.awrap(value);case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}});},function(){},reject);}));case 4:_context2.prev=4;_context2.next=7;return _regeneratorRuntime.awrap(readAsStringAsync(localUri));case 7:return _context2.abrupt(\"return\",_context2.sent);case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](4);message=_context2.t0.message;throw new Error(\"ExpoTHREE: FileSystem.readAsStringAsync(\"+localUri+\") \"+message);case 14:_context2.prev=14;if(global.__expo_three_log_loading){console.timeEnd('loadAsset');}return _context2.finish(14);case 17:case\"end\":return _context2.stop();}}},null,null,[[4,10,14,17]]);}","map":{"version":3,"sources":["../../src/loaders/readAsStringAsync.ts"],"names":[],"mappings":"yHACA,OAAS,iBAAT,KAAkC,kBAAlC,CAEA,MAAO,CAAA,KAAP,gBAIA,cAAe,SAAe,CAAA,+BAAf,CACb,QADa,iKAGb,GAAI,MAAM,CAAC,wBAAX,CAAqC,CACnC,OAAO,CAAC,IAAR,CAAa,WAAb,EACD,CALY,KAOT,QAAQ,CAAC,EAAT,GAAgB,KAPP,2BAQL,MARK,CAQI,GAAI,CAAA,KAAK,CAAC,UAAV,EARJ,kCASJ,GAAI,CAAA,OAAJ,CAAY,SAAC,OAAD,CAAU,MAAV,QACjB,CAAA,MAAM,CAAC,IAAP,CACE,QADF,CAEE,iBAAM,KAAN,+HAEE,OAFF,kDAEgB,KAFhB,8GAFF,CAME,UAAK,CAAG,CANV,CAOE,MAPF,CADiB,EAAZ,CATI,4EAsBE,iBAAiB,CAAC,QAAD,CAtBnB,uHAuBF,OAvBE,cAuBF,OAvBE,MAwBL,IAAI,CAAA,KAAJ,4CACuC,QADvC,MACoD,OADpD,CAxBK,2BA4BX,GAAI,MAAM,CAAC,wBAAX,CAAqC,CACnC,OAAO,CAAC,OAAR,CAAgB,WAAhB,EACD,CA9BU","sourcesContent":["import { Platform } from 'react-native';\nimport { readAsStringAsync } from 'expo-file-system';\n\nimport THREE from '../Three';\n\ndeclare var global: any;\n\nexport default async function readFromFileSystemAsStringAsync(\n  localUri: string\n): Promise<string | null> {\n  if (global.__expo_three_log_loading) {\n    console.time('loadAsset');\n  }\n\n  if (Platform.OS === 'web') {\n    const loader = new THREE.FileLoader();\n    return new Promise((resolve, reject) =>\n      loader.load(\n        localUri,\n        async value => {\n          // @ts-ignore\n          resolve(await value);\n        },\n        () => {},\n        reject\n      )\n    );\n  }\n  try {\n    return await readAsStringAsync(localUri);\n  } catch ({ message }) {\n    throw new Error(\n      `ExpoTHREE: FileSystem.readAsStringAsync(${localUri}) ${message}`\n    );\n  } finally {\n    if (global.__expo_three_log_loading) {\n      console.timeEnd('loadAsset');\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}