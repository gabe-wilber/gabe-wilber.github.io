{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{loadTextureAsync}from\"./loaders/loadTextureAsync\";import THREE from\"./Three\";import parseAssetCallback from\"./loaders/parseAssetCallback\";export function loadTexture(url,onLoad,onProgress,onError){var _this=this;var texture=new THREE.Texture();if(typeof this.path==='function'||this.path!==null&&typeof this.path==='object'){(function _callee(){var asset,_ref,minFilter,image;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=url.split('/').pop();_context.next=3;return _regeneratorRuntime.awrap(parseAssetCallback(url,_this.path));case 3:asset=_context.sent;_context.next=6;return _regeneratorRuntime.awrap(loadTextureAsync({asset:asset}));case 6:_ref=_context.sent;minFilter=_ref.minFilter;image=_ref.image;texture.image=image;texture.needsUpdate=true;texture['isDataTexture']=true;texture.minFilter=minFilter;if(onLoad!==undefined){console.warn('loaded tex',texture);onLoad(texture);}case 14:case\"end\":return _context.stop();}}});})();}return texture;}","map":{"version":3,"sources":["../src/loadTexture.ts"],"names":[],"mappings":"4DAAA,OAAS,gBAAT,kCACA,MAAO,CAAA,KAAP,eACA,MAAO,CAAA,kBAAP,oCAEA,MAAM,SAAU,CAAA,WAAV,CAAsB,GAAtB,CAA2B,MAA3B,CAAmC,UAAnC,CAA+C,OAA/C,CAAsD,gBAC1D,GAAM,CAAA,OAAO,CAAG,GAAI,CAAA,KAAK,CAAC,OAAV,EAAhB,CACA,GAEE,MAAO,MAAK,IAAZ,GAAqB,UAArB,EAEC,KAAK,IAAL,GAAc,IAAd,EAAsB,MAAO,MAAK,IAAZ,GAAqB,QAJ9C,CAKE,CACA,CAAC,mKACC,GAAG,CAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAN,CADD,iDAGqB,kBAAkB,CAAC,GAAD,CAAM,KAAI,CAAC,IAAX,CAHvC,SAGO,KAHP,gEAIoC,gBAAgB,CAAC,CAAE,KAAK,CAAL,KAAF,CAAD,CAJpD,4BAIS,SAJT,MAIS,SAJT,CAIoB,KAJpB,MAIoB,KAJpB,CAKC,OAAO,CAAC,KAAR,CAAgB,KAAhB,CACA,OAAO,CAAC,WAAR,CAAsB,IAAtB,CACA,OAAO,CAAC,eAAD,CAAP,CAA2B,IAA3B,CACA,OAAO,CAAC,SAAR,CAAoB,SAApB,CAEA,GAAI,MAAM,GAAK,SAAf,CAA0B,CACxB,OAAO,CAAC,IAAR,CAAa,YAAb,CAA2B,OAA3B,EACA,MAAM,CAAC,OAAD,CAAN,CACD,CAbF,+CAAD,IAeD,CAED,MAAO,CAAA,OAAP,CACD","sourcesContent":["import { loadTextureAsync } from './loaders/loadTextureAsync';\nimport THREE from './Three';\nimport parseAssetCallback from './loaders/parseAssetCallback';\n\nexport function loadTexture(url, onLoad, onProgress, onError) {\n  const texture = new THREE.Texture();\n  if (\n    // @ts-ignore\n    typeof this.path === 'function' ||\n    // @ts-ignore\n    (this.path !== null && typeof this.path === 'object')\n  ) {\n    (async () => {\n      url = url.split('/').pop();\n      // @ts-ignore\n      const asset = await parseAssetCallback(url, this.path);\n      const { minFilter, image } = await loadTextureAsync({ asset });\n      texture.image = image;\n      texture.needsUpdate = true;\n      texture['isDataTexture'] = true; // Forces passing to `gl.texImage2D(...)` verbatim\n      texture.minFilter = minFilter; // Pass-through non-power-of-two\n\n      if (onLoad !== undefined) {\n        console.warn('loaded tex', texture);\n        onLoad(texture);\n      }\n    })();\n  }\n\n  return texture;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}