{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{uriAsync}from'expo-asset-utils';import resolveAsset,{stringFromAsset}from\"./resolveAsset\";import{loadTexture}from\"./loadTexture\";import{loadDaeAsync,loadObjAsync,loadMtlAsync,loadArrayBufferAsync}from\"./loaders/loadModelsAsync\";import\"./polyfillTextureLoader.fx\";import{loadTextureAsync}from\"./loaders/loadTextureAsync\";import{loaderClassForExtension,loaderClassForUri}from\"./loaderClassForExtension\";export function loadBasicModelAsync(options){var uri,onProgress,onAssetRequested,loader,LoaderClass,_loader;return _regeneratorRuntime.async(function loadBasicModelAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:uri=options.uri,onProgress=options.onProgress,onAssetRequested=options.onAssetRequested,loader=options.loader,LoaderClass=options.LoaderClass;_loader=loader||new LoaderClass();if(_loader.setPath){_loader.setPath(onAssetRequested);}return _context.abrupt(\"return\",new Promise(function(res,rej){return _loader.load(uri,res,onProgress,rej);}));case 4:case\"end\":return _context.stop();}}});}export default function loadAsync(res,onProgress){var onAssetRequested,urls,asset,url,arrayBuffer,AssimpLoader,loader,_arrayBuffer,FBXLoader,_loader2,_arrayBuffer2,GLTFLoader,_loader3,XLoader,texLoader,_loader4,LoaderClass,urlB,_args2=arguments;return _regeneratorRuntime.async(function loadAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:onAssetRequested=_args2.length>2&&_args2[2]!==undefined?_args2[2]:function(){};_context2.next=3;return _regeneratorRuntime.awrap(resolveAsset(res));case 3:urls=_context2.sent;if(urls){_context2.next=6;break;}throw new Error(\"ExpoTHREE.loadAsync: Cannot parse undefined assets. Please pass valid resources for: \"+res+\".\");case 6:asset=urls[0];_context2.next=9;return _regeneratorRuntime.awrap(uriAsync(asset));case 9:url=_context2.sent;if(!(url==null)){_context2.next=12;break;}throw new Error(\"ExpoTHREE.loadAsync: this asset couldn't be downloaded. Be sure that your app.json contains the correct extensions.\");case 12:if(!(urls.length===1)){_context2.next=71;break;}if(!url.match(/\\.(jpeg|jpg|gif|png)$/)){_context2.next=17;break;}return _context2.abrupt(\"return\",loadTextureAsync({asset:asset}));case 17:if(!url.match(/\\.assimp$/i)){_context2.next=26;break;}_context2.next=20;return _regeneratorRuntime.awrap(loadArrayBufferAsync({uri:url,onProgress:onProgress}));case 20:arrayBuffer=_context2.sent;AssimpLoader=loaderClassForExtension('assimp');loader=new AssimpLoader();return _context2.abrupt(\"return\",loader.parse(arrayBuffer,onAssetRequested));case 26:if(!url.match(/\\.dae$/i)){_context2.next=30;break;}return _context2.abrupt(\"return\",loadDaeAsync({asset:url,onProgress:onProgress,onAssetRequested:onAssetRequested}));case 30:if(!url.match(/\\.fbx$/i)){_context2.next=39;break;}_context2.next=33;return _regeneratorRuntime.awrap(loadArrayBufferAsync({uri:url,onProgress:onProgress}));case 33:_arrayBuffer=_context2.sent;FBXLoader=loaderClassForExtension('fbx');_loader2=new FBXLoader();return _context2.abrupt(\"return\",_loader2.parse(_arrayBuffer,onAssetRequested));case 39:if(!url.match(/\\.glb|gltf$/i)){_context2.next=48;break;}_context2.next=42;return _regeneratorRuntime.awrap(loadArrayBufferAsync({uri:url,onProgress:onProgress}));case 42:_arrayBuffer2=_context2.sent;GLTFLoader=loaderClassForExtension('gltf');_loader3=new GLTFLoader();return _context2.abrupt(\"return\",new Promise(function(res,rej){return _loader3.parse(_arrayBuffer2,onAssetRequested,res,rej);}));case 48:if(!url.match(/\\.x$/i)){_context2.next=55;break;}XLoader=loaderClassForExtension('x');texLoader={path:onAssetRequested,load:loadTexture};_loader4=new XLoader(undefined,texLoader);return _context2.abrupt(\"return\",new Promise(function(res,rej){return _loader4.load([url,false],res,onProgress,rej);}));case 55:if(!url.match(/\\.json$/i)){_context2.next=59;break;}throw new Error('loadAsync: Please use ExpoTHREE.parseAsync({json}) instead, json can be loaded in lots of different ways.');case 59:if(!url.match(/\\.obj$/i)){_context2.next=63;break;}return _context2.abrupt(\"return\",loadObjAsync({asset:url,onAssetRequested:onAssetRequested}));case 63:if(!url.match(/\\.mtl$/i)){_context2.next=67;break;}return _context2.abrupt(\"return\",loadMtlAsync({asset:url,onAssetRequested:onAssetRequested}));case 67:LoaderClass=loaderClassForUri(url);return _context2.abrupt(\"return\",loadBasicModelAsync({uri:url,onProgress:onProgress,onAssetRequested:onAssetRequested,LoaderClass:LoaderClass}));case 69:_context2.next=86;break;case 71:if(!(urls.length===2)){_context2.next=85;break;}_context2.next=74;return _regeneratorRuntime.awrap(stringFromAsset(urls[1]));case 74:urlB=_context2.sent;if(!(urlB!=null)){_context2.next=82;break;}if(!(url.match(/\\.mtl$/i)&&urlB.match(/\\.obj$/i))){_context2.next=80;break;}return _context2.abrupt(\"return\",loadObjAsync({asset:urlB,mtlAsset:url,onAssetRequested:onAssetRequested}));case 80:if(!(url.match(/\\.obj$/i)&&urlB.match(/\\.mtl$/i))){_context2.next=82;break;}return _context2.abrupt(\"return\",loadObjAsync({asset:url,mtlAsset:urlB,onAssetRequested:onAssetRequested}));case 82:throw new Error('Unrecognized File Type: '+url);case 85:throw new Error('Too many arguments passed: '+urls);case 86:case\"end\":return _context2.stop();}}});}","map":{"version":3,"sources":["../src/loadAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { uriAsync } from 'expo-asset-utils';\nimport resolveAsset, { stringFromAsset } from './resolveAsset';\nimport { ProgressCallback } from './loading.types';\nimport { loadTexture } from './loadTexture';\nimport {\n  loadDaeAsync,\n  loadObjAsync,\n  loadMtlAsync,\n  loadArrayBufferAsync,\n} from './loaders/loadModelsAsync';\nimport './polyfillTextureLoader.fx';\n\nimport { loadTextureAsync } from './loaders/loadTextureAsync';\nimport {\n  loaderClassForExtension,\n  loaderClassForUri,\n} from './loaderClassForExtension';\n\nexport async function loadBasicModelAsync(options: {\n  uri: string;\n  onProgress?: ProgressCallback;\n  onAssetRequested: any;\n  loader?: any;\n  LoaderClass: any;\n}) {\n  const { uri, onProgress, onAssetRequested, loader, LoaderClass } = options;\n  const _loader = loader || new LoaderClass();\n  if (_loader.setPath) {\n    _loader.setPath(onAssetRequested);\n  }\n  return new Promise((res, rej) => _loader.load(uri, res, onProgress, rej));\n}\n\nexport default async function loadAsync(\n  res,\n  onProgress?: ProgressCallback,\n  onAssetRequested = function() {}\n) {\n  let urls = await resolveAsset(res);\n  if (!urls) {\n    throw new Error(\n      `ExpoTHREE.loadAsync: Cannot parse undefined assets. Please pass valid resources for: ${res}.`\n    );\n  }\n  const asset = urls[0];\n  let url: string | null = await uriAsync(asset);\n\n  if (url == null) {\n    throw new Error(\n      `ExpoTHREE.loadAsync: this asset couldn't be downloaded. Be sure that your app.json contains the correct extensions.`\n    );\n  }\n\n  if (urls.length === 1) {\n    if (url.match(/\\.(jpeg|jpg|gif|png)$/)) {\n      return loadTextureAsync({ asset });\n    } else if (url.match(/\\.assimp$/i)) {\n      const arrayBuffer = await loadArrayBufferAsync({ uri: url, onProgress });\n      const AssimpLoader = loaderClassForExtension('assimp');\n      const loader = new AssimpLoader();\n      return loader.parse(arrayBuffer, onAssetRequested);\n    } else if (url.match(/\\.dae$/i)) {\n      return loadDaeAsync({\n        asset: url,\n        onProgress,\n        onAssetRequested,\n      });\n    } else if (url.match(/\\.fbx$/i)) {\n      const arrayBuffer = await loadArrayBufferAsync({ uri: url, onProgress });\n      const FBXLoader = loaderClassForExtension('fbx');\n      const loader = new FBXLoader();\n      return loader.parse(arrayBuffer, onAssetRequested);\n    } else if (url.match(/\\.glb|gltf$/i)) {\n      const arrayBuffer = await loadArrayBufferAsync({ uri: url, onProgress });\n      const GLTFLoader = loaderClassForExtension('gltf');\n      const loader = new GLTFLoader();\n      return new Promise((res, rej) =>\n        loader.parse(arrayBuffer, onAssetRequested, res, rej)\n      );\n    } else if (url.match(/\\.x$/i)) {\n      const XLoader = loaderClassForExtension('x');\n\n      const texLoader = {\n        path: onAssetRequested,\n        load: loadTexture,\n      };\n      const loader = new XLoader(undefined, texLoader);\n      return new Promise((res, rej) =>\n        loader.load([url, false], res, onProgress, rej)\n      );\n    } else if (url.match(/\\.json$/i)) {\n      throw new Error(\n        'loadAsync: Please use ExpoTHREE.parseAsync({json}) instead, json can be loaded in lots of different ways.'\n      );\n    } else if (url.match(/\\.obj$/i)) {\n      return loadObjAsync({ asset: url, onAssetRequested });\n    } else if (url.match(/\\.mtl$/i)) {\n      return loadMtlAsync({ asset: url, onAssetRequested });\n    } else {\n      const LoaderClass = loaderClassForUri(url);\n      return loadBasicModelAsync({\n        uri: url,\n        onProgress,\n        onAssetRequested,\n        LoaderClass,\n      });\n    }\n  } else if (urls.length === 2) {\n    let urlB = await stringFromAsset(urls[1]);\n    if (urlB != null) {\n      if (url.match(/\\.mtl$/i) && urlB.match(/\\.obj$/i)) {\n        return loadObjAsync({\n          asset: urlB,\n          mtlAsset: url,\n          onAssetRequested,\n        });\n      } else if (url.match(/\\.obj$/i) && urlB.match(/\\.mtl$/i)) {\n        return loadObjAsync({\n          asset: url,\n          mtlAsset: urlB,\n          onAssetRequested,\n        });\n      }\n    }\n\n    throw new Error('Unrecognized File Type: ' + url);\n  } else {\n    throw new Error('Too many arguments passed: ' + urls);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}