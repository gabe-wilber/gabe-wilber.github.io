{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{Asset}from'expo-asset';import isReactImageFormat from\"./isReactImageFormat\";import fromUriAsync from\"./fromUriAsync\";var resolveAsync=function resolveAsync(fileReference){var options,asset,_asset,output,_asset2,_args=arguments;return _regeneratorRuntime.async(function resolveAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:options=_args.length>1&&_args[1]!==undefined?_args[1]:{};if(!(fileReference instanceof Asset)){_context.next=8;break;}if(fileReference.localUri){_context.next=5;break;}_context.next=5;return _regeneratorRuntime.awrap(fileReference.downloadAsync());case 5:return _context.abrupt(\"return\",fileReference);case 8:if(!(typeof fileReference==='string')){_context.next=18;break;}_context.next=11;return _regeneratorRuntime.awrap(fromUriAsync(fileReference,options.fileName));case 11:asset=_context.sent;if(!asset){_context.next=16;break;}_context.next=15;return _regeneratorRuntime.awrap(resolveAsync(asset));case 15:return _context.abrupt(\"return\",_context.sent);case 16:_context.next=36;break;case 18:if(!(typeof fileReference==='number')){_context.next=28;break;}_context.next=21;return _regeneratorRuntime.awrap(Asset.fromModule(fileReference));case 21:_asset=_context.sent;_context.next=24;return _regeneratorRuntime.awrap(resolveAsync(_asset));case 24:output=_context.sent;return _context.abrupt(\"return\",output);case 28:if(!isReactImageFormat(fileReference)){_context.next=36;break;}_context.next=31;return _regeneratorRuntime.awrap(fromUriAsync(fileReference.uri,options.fileName));case 31:_asset2=_context.sent;if(!_asset2){_context.next=36;break;}_context.next=35;return _regeneratorRuntime.awrap(resolveAsync(_asset2));case 35:return _context.abrupt(\"return\",_context.sent);case 36:case\"end\":return _context.stop();}}});};export default resolveAsync;","map":{"version":3,"sources":["/Users/gabew/Codelation-Projects/gabe-wilber.github.io/node_modules/expo-asset-utils/src/resolveAsync.js"],"names":["Asset","isReactImageFormat","fromUriAsync","resolveAsync","fileReference","options","localUri","downloadAsync","fileName","asset","fromModule","output","uri"],"mappings":"4DACA,OAASA,KAAT,KAAsB,YAAtB,CACA,MAAOC,CAAAA,kBAAP,4BACA,MAAOC,CAAAA,YAAP,sBAcA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAOC,aAAP,gLAAgCC,OAAhC,+CAAmD,EAAnD,MACfD,aAAa,WAAYJ,CAAAA,KADV,6BAGZI,aAAa,CAACE,QAHF,0EAITF,aAAa,CAACG,aAAd,EAJS,yCAMVH,aANU,cAOR,MAAOA,CAAAA,aAAP,GAAyB,QAPjB,6EASGF,YAAY,CAACE,aAAD,CAAgBC,OAAO,CAACG,QAAxB,CATf,UASXC,KATW,mBAUbA,KAVa,4EAWFN,YAAY,CAACM,KAAD,CAXV,qGAaR,MAAOL,CAAAA,aAAP,GAAyB,QAbjB,6EAeGJ,KAAK,CAACU,UAAN,CAAiBN,aAAjB,CAfH,UAeXK,MAfW,iEAgBIN,YAAY,CAACM,MAAD,CAhBhB,UAgBXE,MAhBW,+CAiBVA,MAjBU,cAkBRV,kBAAkB,CAACG,aAAD,CAlBV,4EAoBGF,YAAY,CAACE,aAAa,CAACQ,GAAf,CAAoBP,OAAO,CAACG,QAA5B,CApBf,UAoBXC,OApBW,mBAqBbA,OArBa,4EAsBFN,YAAY,CAACM,OAAD,CAtBV,wGAArB,CA2BA,cAAeN,CAAAA,YAAf","sourcesContent":["// @flow\nimport { Asset } from 'expo-asset';\nimport isReactImageFormat from './isReactImageFormat';\nimport fromUriAsync from './fromUriAsync';\n\ntype ImageFormat = {\n  uri: string,\n  width?: number,\n  height?: number,\n};\n\nexport type WildCard = Asset | number | string | ImageFormat;\n\nexport type Options = {\n  fileName: string,\n};\n\nconst resolveAsync = async (fileReference: WildCard, options: Options = {}): Promise<?Asset> => {\n  if (fileReference instanceof Asset) {\n    /// Asset\n    if (!fileReference.localUri) {\n      await fileReference.downloadAsync();\n    }\n    return fileReference;\n  } else if (typeof fileReference === 'string') {\n    /// uri\n    const asset = await fromUriAsync(fileReference, options.fileName);\n    if (asset) {\n      return await resolveAsync(asset);\n    }\n  } else if (typeof fileReference === 'number') {\n    /// static resource\n    const asset = await Asset.fromModule(fileReference);\n    const output = await resolveAsync(asset);\n    return output;\n  } else if (isReactImageFormat(fileReference)) {\n    /// { uri: string }\n    const asset = await fromUriAsync(fileReference.uri, options.fileName);\n    if (asset) {\n      return await resolveAsync(asset);\n    }\n  }\n};\n\nexport default resolveAsync;\n"]},"metadata":{},"sourceType":"module"}