{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import THREE from\"./Three\";var Renderer=function(_THREE$WebGLRenderer){_inherits(Renderer,_THREE$WebGLRenderer);function Renderer(_ref){var _this;var context=_ref.gl,canvas=_ref.canvas,_ref$pixelRatio=_ref.pixelRatio,pixelRatio=_ref$pixelRatio===void 0?1:_ref$pixelRatio,clearColor=_ref.clearColor,width=_ref.width,height=_ref.height,props=_objectWithoutProperties(_ref,[\"gl\",\"canvas\",\"pixelRatio\",\"clearColor\",\"width\",\"height\"]);_classCallCheck(this,Renderer);var inputCanvas=canvas||{width:context.drawingBufferWidth,height:context.drawingBufferHeight,style:{},addEventListener:function addEventListener(){},removeEventListener:function removeEventListener(){},clientHeight:context.drawingBufferHeight};_this=_possibleConstructorReturn(this,_getPrototypeOf(Renderer).call(this,_objectSpread({canvas:inputCanvas,context:context},props)));_this.setPixelRatio(pixelRatio);if(width&&height){_this.setSize(width,height);}if(clearColor){_this.setClearColor(clearColor);}return _this;}return Renderer;}(THREE.WebGLRenderer);export{Renderer as default};","map":{"version":3,"sources":["../src/Renderer.ts"],"names":[],"mappings":"0sCAAA,MAAO,CAAA,KAAP,e,GAUqB,CAAA,Q,yEACnB,uBAQgB,cAPV,CAAA,OAOU,MAPd,EAOc,CANd,MAMc,MANd,MAMc,sBALd,UAKc,CALd,UAKc,0BALD,CAKC,iBAJd,UAIc,MAJd,UAIc,CAHd,KAGc,MAHd,KAGc,CAFd,MAEc,MAFd,MAEc,CADX,KACW,0HACd,GAAM,CAAA,WAAW,CACf,MAAM,EACL,CACC,KAAK,CAAE,OAAO,CAAC,kBADhB,CAEC,MAAM,CAAE,OAAO,CAAC,mBAFjB,CAGC,KAAK,CAAE,EAHR,CAIC,gBAAgB,CAAG,2BAAK,CAAG,CAJ5B,CAKC,mBAAmB,CAAG,8BAAK,CAAG,CAL/B,CAMC,YAAY,CAAE,OAAO,CAAC,mBANvB,CAFH,CAWA,yFACE,MAAM,CAAE,WADV,CAEE,OAAO,CAAP,OAFF,EAGK,KAHL,IAMA,MAAK,aAAL,CAAmB,UAAnB,EAEA,GAAI,KAAK,EAAI,MAAb,CAAqB,CACnB,MAAK,OAAL,CAAa,KAAb,CAAoB,MAApB,EACD,CACD,GAAI,UAAJ,CAAgB,CAEd,MAAK,aAAL,CAAmB,UAAnB,EACD,CA1Ba,aA2Bf,C,kBApCmC,KAAK,CAAC,a,SAAvB,Q","sourcesContent":["import THREE from './Three';\n\ntype RendererProps = THREE.WebGLRendererParameters & {\n  gl: WebGLRenderingContext;\n  canvas?: HTMLCanvasElement;\n  pixelRatio?: number;\n  clearColor?: THREE.Color | string | number;\n  width?: number;\n  height?: number;\n};\nexport default class Renderer extends THREE.WebGLRenderer {\n  constructor({\n    gl: context,\n    canvas,\n    pixelRatio = 1,\n    clearColor,\n    width,\n    height,\n    ...props\n  }: RendererProps) {\n    const inputCanvas =\n      canvas ||\n      ({\n        width: context.drawingBufferWidth,\n        height: context.drawingBufferHeight,\n        style: {},\n        addEventListener: (() => {}) as any,\n        removeEventListener: (() => {}) as any,\n        clientHeight: context.drawingBufferHeight,\n      } as HTMLCanvasElement);\n\n    super({\n      canvas: inputCanvas,\n      context,\n      ...props,\n    });\n\n    this.setPixelRatio(pixelRatio);\n\n    if (width && height) {\n      this.setSize(width, height);\n    }\n    if (clearColor) {\n      // @ts-ignore: Type 'string' is not assignable to type 'number'.ts(2345)\n      this.setClearColor(clearColor);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}