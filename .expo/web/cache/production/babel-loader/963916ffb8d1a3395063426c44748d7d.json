{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{SyntheticPlatformEmitter}from'@unimodules/core';function getStatusFromMedia(media){if(!media){return{isLoaded:false,error:undefined};}var isPlaying=!!(media.currentTime>0&&!media.paused&&!media.ended&&media.readyState>2);var status={isLoaded:true,uri:media.src,progressUpdateIntervalMillis:100,durationMillis:media.duration*1000,positionMillis:media.currentTime*1000,shouldPlay:media.autoplay,isPlaying:isPlaying,isBuffering:false,rate:media.playbackRate,shouldCorrectPitch:false,volume:media.volume,isMuted:media.muted,isLooping:media.loop,didJustFinish:media.ended};return status;}function setStatusForMedia(media,status){if(status.positionMillis!==undefined){media.currentTime=status.positionMillis/1000;}if(status.shouldPlay!==undefined){if(status.shouldPlay){media.play();}else{media.pause();}}if(status.rate!==undefined){media.playbackRate=status.rate;}if(status.volume!==undefined){media.volume=status.volume;}if(status.isMuted!==undefined){media.muted=status.isMuted;}if(status.isLooping!==undefined){media.loop=status.isLooping;}return getStatusFromMedia(media);}export default{get name(){return'ExponentAV';},getStatusForVideo:function getStatusForVideo(element){return _regeneratorRuntime.async(function getStatusForVideo$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",getStatusFromMedia(element));case 1:case\"end\":return _context.stop();}}});},loadForVideo:function loadForVideo(element,nativeSource,fullInitialStatus){return _regeneratorRuntime.async(function loadForVideo$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",getStatusFromMedia(element));case 1:case\"end\":return _context2.stop();}}});},unloadForVideo:function unloadForVideo(element){return _regeneratorRuntime.async(function unloadForVideo$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",getStatusFromMedia(element));case 1:case\"end\":return _context3.stop();}}});},setStatusForVideo:function setStatusForVideo(element,status){return _regeneratorRuntime.async(function setStatusForVideo$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt(\"return\",setStatusForMedia(element,status));case 1:case\"end\":return _context4.stop();}}});},replayVideo:function replayVideo(element,status){return _regeneratorRuntime.async(function replayVideo$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt(\"return\",setStatusForMedia(element,status));case 1:case\"end\":return _context5.stop();}}});},setAudioMode:function setAudioMode(){return _regeneratorRuntime.async(function setAudioMode$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:case\"end\":return _context6.stop();}}});},setAudioIsEnabled:function setAudioIsEnabled(){return _regeneratorRuntime.async(function setAudioIsEnabled$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:case\"end\":return _context7.stop();}}});},getStatusForSound:function getStatusForSound(element){return _regeneratorRuntime.async(function getStatusForSound$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:return _context8.abrupt(\"return\",getStatusFromMedia(element));case 1:case\"end\":return _context8.stop();}}});},loadForSound:function loadForSound(nativeSource,fullInitialStatus){var source,media,status;return _regeneratorRuntime.async(function loadForSound$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:source=typeof nativeSource==='string'?nativeSource:nativeSource.uri;media=new Audio(source);media.ontimeupdate=function(){SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus',{key:media,status:getStatusFromMedia(media)});};media.onerror=function(){SyntheticPlatformEmitter.emit('ExponentAV.onError',{key:media,error:media.error.message});};status=setStatusForMedia(media,fullInitialStatus);return _context9.abrupt(\"return\",[media,status]);case 6:case\"end\":return _context9.stop();}}});},unloadForSound:function unloadForSound(element){return _regeneratorRuntime.async(function unloadForSound$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:case\"end\":return _context10.stop();}}});},setStatusForSound:function setStatusForSound(element,status){return _regeneratorRuntime.async(function setStatusForSound$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:return _context11.abrupt(\"return\",setStatusForMedia(element,status));case 1:case\"end\":return _context11.stop();}}});},replaySound:function replaySound(element,status){return _regeneratorRuntime.async(function replaySound$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:return _context12.abrupt(\"return\",setStatusForMedia(element,status));case 1:case\"end\":return _context12.stop();}}});},getAudioRecordingStatus:function getAudioRecordingStatus(){return _regeneratorRuntime.async(function getAudioRecordingStatus$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:case\"end\":return _context13.stop();}}});},prepareAudioRecorder:function prepareAudioRecorder(){return _regeneratorRuntime.async(function prepareAudioRecorder$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:case\"end\":return _context14.stop();}}});},startAudioRecording:function startAudioRecording(){return _regeneratorRuntime.async(function startAudioRecording$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:case\"end\":return _context15.stop();}}});},pauseAudioRecording:function pauseAudioRecording(){return _regeneratorRuntime.async(function pauseAudioRecording$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:case\"end\":return _context16.stop();}}});},stopAudioRecording:function stopAudioRecording(){return _regeneratorRuntime.async(function stopAudioRecording$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:case\"end\":return _context17.stop();}}});},unloadAudioRecorder:function unloadAudioRecorder(){return _regeneratorRuntime.async(function unloadAudioRecorder$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:case\"end\":return _context18.stop();}}});}};","map":{"version":3,"sources":["../src/ExponentAV.web.ts"],"names":[],"mappings":"4DAAA,OAAS,wBAAT,KAAyC,kBAAzC,CAIA,QAAS,CAAA,kBAAT,CAA4B,KAA5B,CAAoD,CAClD,GAAI,CAAC,KAAL,CAAY,CACV,MAAO,CACL,QAAQ,CAAE,KADL,CAEL,KAAK,CAAE,SAFF,CAAP,CAID,CAED,GAAM,CAAA,SAAS,CAAG,CAAC,EACjB,KAAK,CAAC,WAAN,CAAoB,CAApB,EACA,CAAC,KAAK,CAAC,MADP,EAEA,CAAC,KAAK,CAAC,KAFP,EAGA,KAAK,CAAC,UAAN,CAAmB,CAJF,CAAnB,CAOA,GAAM,CAAA,MAAM,CAAmB,CAC7B,QAAQ,CAAE,IADmB,CAE7B,GAAG,CAAE,KAAK,CAAC,GAFkB,CAG7B,4BAA4B,CAAE,GAHD,CAI7B,cAAc,CAAE,KAAK,CAAC,QAAN,CAAiB,IAJJ,CAK7B,cAAc,CAAE,KAAK,CAAC,WAAN,CAAoB,IALP,CAS7B,UAAU,CAAE,KAAK,CAAC,QATW,CAU7B,SAAS,CAAT,SAV6B,CAW7B,WAAW,CAAE,KAXgB,CAY7B,IAAI,CAAE,KAAK,CAAC,YAZiB,CAc7B,kBAAkB,CAAE,KAdS,CAe7B,MAAM,CAAE,KAAK,CAAC,MAfe,CAgB7B,OAAO,CAAE,KAAK,CAAC,KAhBc,CAiB7B,SAAS,CAAE,KAAK,CAAC,IAjBY,CAkB7B,aAAa,CAAE,KAAK,CAAC,KAlBQ,CAA/B,CAqBA,MAAO,CAAA,MAAP,CACD,CAED,QAAS,CAAA,iBAAT,CAA2B,KAA3B,CAAoD,MAApD,CAA+E,CAC7E,GAAI,MAAM,CAAC,cAAP,GAA0B,SAA9B,CAAyC,CACvC,KAAK,CAAC,WAAN,CAAoB,MAAM,CAAC,cAAP,CAAwB,IAA5C,CACD,CAaD,GAAI,MAAM,CAAC,UAAP,GAAsB,SAA1B,CAAqC,CACnC,GAAI,MAAM,CAAC,UAAX,CAAuB,CACrB,KAAK,CAAC,IAAN,GACD,CAFD,IAEO,CACL,KAAK,CAAC,KAAN,GACD,CACF,CACD,GAAI,MAAM,CAAC,IAAP,GAAgB,SAApB,CAA+B,CAC7B,KAAK,CAAC,YAAN,CAAqB,MAAM,CAAC,IAA5B,CACD,CACD,GAAI,MAAM,CAAC,MAAP,GAAkB,SAAtB,CAAiC,CAC/B,KAAK,CAAC,MAAN,CAAe,MAAM,CAAC,MAAtB,CACD,CACD,GAAI,MAAM,CAAC,OAAP,GAAmB,SAAvB,CAAkC,CAChC,KAAK,CAAC,KAAN,CAAc,MAAM,CAAC,OAArB,CACD,CACD,GAAI,MAAM,CAAC,SAAP,GAAqB,SAAzB,CAAoC,CAClC,KAAK,CAAC,IAAN,CAAa,MAAM,CAAC,SAApB,CACD,CAED,MAAO,CAAA,kBAAkB,CAAC,KAAD,CAAzB,CACD,CAED,cAAe,CACb,GAAI,CAAA,IAAJ,EAAQ,CACN,MAAO,YAAP,CACD,CAHY,CAIP,iBAJO,4BAIW,OAJX,6JAKJ,kBAAkB,CAAC,OAAD,CALd,iDAOP,YAPO,uBAQX,OARW,CASX,YATW,CAUX,iBAVW,4JAYJ,kBAAkB,CAAC,OAAD,CAZd,kDAcP,cAdO,yBAcQ,OAdR,8JAeJ,kBAAkB,CAAC,OAAD,CAfd,kDAiBP,iBAjBO,4BAkBX,OAlBW,CAmBX,MAnBW,iKAqBJ,iBAAiB,CAAC,OAAD,CAAU,MAAV,CArBb,kDAuBP,WAvBO,sBAwBX,OAxBW,CAyBX,MAzBW,2JA2BJ,iBAAiB,CAAC,OAAD,CAAU,MAAV,CA3Bb,kDA8BP,YA9BO,2LA+BP,iBA/BO,qMAgCP,iBAhCO,4BAgCW,OAhCX,iKAiCJ,kBAAkB,CAAC,OAAD,CAjCd,kDAmCP,YAnCO,uBAoCX,YApCW,CAqCX,iBArCW,mJAuCL,MAvCK,CAuCI,MAAO,CAAA,YAAP,GAAwB,QAAxB,CAAmC,YAAnC,CAAkD,YAAY,CAAC,GAvCnE,CAwCL,KAxCK,CAwCG,GAAI,CAAA,KAAJ,CAAU,MAAV,CAxCH,CA0CX,KAAK,CAAC,YAAN,CAAqB,UAAK,CACxB,wBAAwB,CAAC,IAAzB,CAA8B,yBAA9B,CAAyD,CACvD,GAAG,CAAE,KADkD,CAEvD,MAAM,CAAE,kBAAkB,CAAC,KAAD,CAF6B,CAAzD,EAID,CALD,CAOA,KAAK,CAAC,OAAN,CAAgB,UAAK,CACnB,wBAAwB,CAAC,IAAzB,CAA8B,oBAA9B,CAAoD,CAClD,GAAG,CAAE,KAD6C,CAElD,KAAK,CAAE,KAAK,CAAC,KAAN,CAAa,OAF8B,CAApD,EAID,CALD,CAOM,MAxDK,CAwDI,iBAAiB,CAAC,KAAD,CAAQ,iBAAR,CAxDrB,kCA0DJ,CAAC,KAAD,CAAQ,MAAR,CA1DI,kDA4DP,cA5DO,yBA4DQ,OA5DR,0KA6DP,iBA7DO,4BA8DX,OA9DW,CA+DX,MA/DW,qKAiEJ,iBAAiB,CAAC,OAAD,CAAU,MAAV,CAjEb,mDAmEP,WAnEO,sBAoEX,OApEW,CAqEX,MArEW,+JAuEJ,iBAAiB,CAAC,OAAD,CAAU,MAAV,CAvEb,mDA4EP,uBA5EO,qNA6EP,oBA7EO,+MA8EP,mBA9EO,6MA+EP,mBA/EO,6MAgFP,kBAhFO,2MAiFP,mBAjFO,6MAAf","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport { PlaybackNativeSource, PlaybackStatus, PlaybackStatusToSet } from './AV';\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): PlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: PlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nfunction setStatusForMedia(media: HTMLMediaElement, status: PlaybackStatusToSet): PlaybackStatus {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: PlaybackNativeSource,\n    fullInitialStatus: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element: HTMLMediaElement) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(\n    nativeSource: string | { uri: string; [key: string]: any },\n    fullInitialStatus: PlaybackStatusToSet\n  ): Promise<[HTMLMediaElement, PlaybackStatus]> {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media),\n      });\n    };\n\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error!.message,\n      });\n    };\n\n    const status = setStatusForMedia(media, fullInitialStatus);\n\n    return [media, status];\n  },\n  async unloadForSound(element: HTMLMediaElement) {},\n  async setStatusForSound(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus() {},\n  async prepareAudioRecorder() {},\n  async startAudioRecording() {},\n  async pauseAudioRecording() {},\n  async stopAudioRecording() {},\n  async unloadAudioRecorder() {},\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}