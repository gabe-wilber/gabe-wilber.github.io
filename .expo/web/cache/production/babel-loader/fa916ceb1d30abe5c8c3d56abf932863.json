{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import ExponentAV from\"./ExponentAV\";export*from\"./Audio/Recording\";export*from\"./Audio/Sound\";export{setIsEnabledAsync}from\"./Audio/AudioAvailability\";export{PitchCorrectionQuality}from\"./AV\";export var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS=0;export var INTERRUPTION_MODE_IOS_DO_NOT_MIX=1;export var INTERRUPTION_MODE_IOS_DUCK_OTHERS=2;export var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX=1;export var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS=2;var _isValueValid=function _isValueValid(value,validValues){return validValues.filter(function(validValue){return validValue===value;}).length>0;};var _findMissingKeys=function _findMissingKeys(object,requiredKeys){return requiredKeys.filter(function(requiredKey){return!(requiredKey in object);});};export function setAudioModeAsync(mode){var missingKeys;return _regeneratorRuntime.async(function setAudioModeAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:missingKeys=_findMissingKeys(mode,['allowsRecordingIOS','interruptionModeIOS','playsInSilentModeIOS','staysActiveInBackground','interruptionModeAndroid','shouldDuckAndroid','playThroughEarpieceAndroid']);if(!(missingKeys.length>0)){_context.next=3;break;}throw new Error(\"Audio mode attempted to be set without the required keys: \"+JSON.stringify(missingKeys));case 3:if(_isValueValid(mode.interruptionModeIOS,[INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,INTERRUPTION_MODE_IOS_DO_NOT_MIX,INTERRUPTION_MODE_IOS_DUCK_OTHERS])){_context.next=5;break;}throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");case 5:if(_isValueValid(mode.interruptionModeAndroid,[INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])){_context.next=7;break;}throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");case 7:if(!(typeof mode.allowsRecordingIOS!=='boolean'||typeof mode.playsInSilentModeIOS!=='boolean'||typeof mode.staysActiveInBackground!=='boolean'||typeof mode.shouldDuckAndroid!=='boolean'||typeof mode.playThroughEarpieceAndroid!=='boolean')){_context.next=9;break;}throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');case 9:_context.next=11;return _regeneratorRuntime.awrap(ExponentAV.setAudioMode(mode));case 11:return _context.abrupt(\"return\",_context.sent);case 12:case\"end\":return _context.stop();}}});}","map":{"version":3,"sources":["../src/Audio.ts"],"names":[],"mappings":"4DAAA,MAAO,CAAA,UAAP,oBAEA,+BACA,2BACA,OAAS,iBAAT,iCACA,OAAS,sBAAT,YAYA,MAAO,IAAM,CAAA,qCAAqC,CAAG,CAA9C,CACP,MAAO,IAAM,CAAA,gCAAgC,CAAG,CAAzC,CACP,MAAO,IAAM,CAAA,iCAAiC,CAAG,CAA1C,CAEP,MAAO,IAAM,CAAA,oCAAoC,CAAG,CAA7C,CACP,MAAO,IAAM,CAAA,qCAAqC,CAAG,CAA9C,CAGP,GAAM,CAAA,aAAa,CAAG,QAAhB,CAAA,aAAgB,CAAC,KAAD,CAAa,WAAb,CAA4C,CAChE,MAAO,CAAA,WAAW,CAAC,MAAZ,CAAmB,SAAA,UAAU,QAAI,CAAA,UAAU,GAAK,KAAnB,EAA7B,EAAuD,MAAvD,CAAgE,CAAvE,CACD,CAFD,CAKA,GAAM,CAAA,gBAAgB,CAAG,QAAnB,CAAA,gBAAmB,CAAC,MAAD,CAAiB,YAAjB,CAA+C,CACtE,MAAO,CAAA,YAAY,CAAC,MAAb,CAAoB,SAAA,WAAW,QAAI,EAAE,WAAW,GAAI,CAAA,MAAjB,CAAJ,EAA/B,CAAP,CACD,CAFD,CAIA,MAAO,SAAe,CAAA,iBAAf,CAAiC,IAAjC,6IACC,WADD,CACe,gBAAgB,CAAC,IAAD,CAAO,CACzC,oBADyC,CAEzC,qBAFyC,CAGzC,sBAHyC,CAIzC,yBAJyC,CAKzC,yBALyC,CAMzC,mBANyC,CAOzC,4BAPyC,CAAP,CAD/B,MAUD,WAAW,CAAC,MAAZ,CAAqB,CAVpB,+BAWG,IAAI,CAAA,KAAJ,8DACyD,IAAI,CAAC,SAAL,CAAe,WAAf,CADzD,CAXH,WAgBF,aAAa,CAAC,IAAI,CAAC,mBAAN,CAA2B,CACvC,qCADuC,CAEvC,gCAFuC,CAGvC,iCAHuC,CAA3B,CAhBX,8BAsBG,IAAI,CAAA,KAAJ,wDAtBH,WAyBF,aAAa,CAAC,IAAI,CAAC,uBAAN,CAA+B,CAC3C,oCAD2C,CAE3C,qCAF2C,CAA/B,CAzBX,8BA8BG,IAAI,CAAA,KAAJ,4DA9BH,aAiCH,MAAO,CAAA,IAAI,CAAC,kBAAZ,GAAmC,SAAnC,EACA,MAAO,CAAA,IAAI,CAAC,oBAAZ,GAAqC,SADrC,EAEA,MAAO,CAAA,IAAI,CAAC,uBAAZ,GAAwC,SAFxC,EAGA,MAAO,CAAA,IAAI,CAAC,iBAAZ,GAAkC,SAHlC,EAIA,MAAO,CAAA,IAAI,CAAC,0BAAZ,GAA2C,SArCxC,+BAuCG,IAAI,CAAA,KAAJ,CACJ,iJADI,CAvCH,0DA2CQ,UAAU,CAAC,YAAX,CAAwB,IAAxB,CA3CR","sourcesContent":["import ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nexport type AudioMode = {\n  allowsRecordingIOS: boolean;\n  interruptionModeIOS: number;\n  playsInSilentModeIOS: boolean;\n  staysActiveInBackground: boolean;\n  interruptionModeAndroid: number;\n  shouldDuckAndroid: boolean;\n  playThroughEarpieceAndroid: boolean;\n};\n\nexport const INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport const INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\n\nexport const INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\n// Returns true if value is in validValues, and false if not.\nconst _isValueValid = (value: any, validValues: any[]): boolean => {\n  return validValues.filter(validValue => validValue === value).length > 0;\n};\n\n// Returns array of missing keys in object. Returns an empty array if no missing keys are found.\nconst _findMissingKeys = (object: Object, requiredKeys: any[]): any[] => {\n  return requiredKeys.filter(requiredKey => !(requiredKey in object));\n};\n\nexport async function setAudioModeAsync(mode: AudioMode): Promise<void> {\n  const missingKeys = _findMissingKeys(mode, [\n    'allowsRecordingIOS',\n    'interruptionModeIOS',\n    'playsInSilentModeIOS',\n    'staysActiveInBackground',\n    'interruptionModeAndroid',\n    'shouldDuckAndroid',\n    'playThroughEarpieceAndroid',\n  ]);\n  if (missingKeys.length > 0) {\n    throw new Error(\n      `Audio mode attempted to be set without the required keys: ${JSON.stringify(missingKeys)}`\n    );\n  }\n  if (\n    !_isValueValid(mode.interruptionModeIOS, [\n      INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n      INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n      INTERRUPTION_MODE_IOS_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (\n    !_isValueValid(mode.interruptionModeAndroid, [\n      INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n      INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}