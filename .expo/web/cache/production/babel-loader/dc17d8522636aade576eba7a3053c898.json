{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{Asset}from'expo-asset';import{getSizeAsync}from\"./ImageUtils\";import fileInfoAsync from\"./fileInfoAsync\";function isImageType(type){return type.match(/(jpeg|jpg|gif|png|bmp)$/)!=null;}function getExtension(url){return url.split('.').pop().split('?')[0].split('#')[0].toLowerCase();}function fromUriAsync(remoteUri,fileName){var _ref,uri,name,hash,type,width,height,size;return _regeneratorRuntime.async(function fromUriAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(fileInfoAsync(remoteUri,fileName));case 2:_ref=_context.sent;uri=_ref.uri;name=_ref.name;hash=_ref.hash;if(!uri){_context.next=17;break;}type=getExtension(name);width=undefined;height=undefined;if(!isImageType(type)){_context.next=16;break;}_context.next=13;return _regeneratorRuntime.awrap(getSizeAsync(uri));case 13:size=_context.sent;width=size.width;height=size.height;case 16:return _context.abrupt(\"return\",new Asset({name:name,type:type,hash:hash,uri:uri,width:width,height:height}));case 17:case\"end\":return _context.stop();}}});}export default fromUriAsync;","map":{"version":3,"sources":["/Users/gabew/Codelation-Projects/gabe-wilber.github.io/node_modules/expo-asset-utils/src/fromUriAsync.js"],"names":["Asset","getSizeAsync","fileInfoAsync","isImageType","type","match","getExtension","url","split","pop","toLowerCase","fromUriAsync","remoteUri","fileName","uri","name","hash","width","undefined","height","size"],"mappings":"4DACA,OAASA,KAAT,KAAsB,YAAtB,CACA,OAASC,YAAT,oBACA,MAAOC,CAAAA,aAAP,uBAEA,QAASC,CAAAA,WAAT,CAAqBC,IAArB,CAA4C,CAC1C,MAAOA,CAAAA,IAAI,CAACC,KAAL,CAAW,yBAAX,GAAyC,IAAhD,CACD,CAED,QAASC,CAAAA,YAAT,CAAsBC,GAAtB,CAA2C,CACzC,MAAOA,CAAAA,GAAG,CACPC,KADI,CACE,GADF,EAEJC,GAFI,GAGJD,KAHI,CAGE,GAHF,EAGO,CAHP,EAIJA,KAJI,CAIE,GAJF,EAIO,CAJP,EAKJE,WALI,EAAP,CAMD,CAED,QAAeC,CAAAA,YAAf,CAA4BC,SAA5B,CAA+CC,QAA/C,uNACoCX,aAAa,CAACU,SAAD,CAAYC,QAAZ,CADjD,4BACUC,GADV,MACUA,GADV,CACeC,IADf,MACeA,IADf,CACqBC,IADrB,MACqBA,IADrB,KAGMF,GAHN,0BAIUV,IAJV,CAIiBE,YAAY,CAACS,IAAD,CAJ7B,CAKQE,KALR,CAKgBC,SALhB,CAMQC,MANR,CAMiBD,SANjB,KAOQf,WAAW,CAACC,IAAD,CAPnB,4EAQyBH,YAAY,CAACa,GAAD,CARrC,UAQYM,IARZ,eASMH,KAAK,CAAGG,IAAI,CAACH,KAAb,CACAE,MAAM,CAAGC,IAAI,CAACD,MAAd,CAVN,wCAaW,GAAInB,CAAAA,KAAJ,CAAU,CAAEe,IAAI,CAAJA,IAAF,CAAQX,IAAI,CAAJA,IAAR,CAAcY,IAAI,CAAJA,IAAd,CAAoBF,GAAG,CAAHA,GAApB,CAAyBG,KAAK,CAALA,KAAzB,CAAgCE,MAAM,CAANA,MAAhC,CAAV,CAbX,iDAiBA,cAAeR,CAAAA,YAAf","sourcesContent":["// @flow\nimport { Asset } from 'expo-asset';\nimport { getSizeAsync } from './ImageUtils';\nimport fileInfoAsync from './fileInfoAsync';\n\nfunction isImageType(type: string): boolean {\n  return type.match(/(jpeg|jpg|gif|png|bmp)$/) != null;\n}\n\nfunction getExtension(url: string): string {\n  return url\n    .split('.')\n    .pop()\n    .split('?')[0]\n    .split('#')[0]\n    .toLowerCase();\n}\n\nasync function fromUriAsync(remoteUri: string, fileName: ?string): Promise<Asset> {\n  const { uri, name, hash } = await fileInfoAsync(remoteUri, fileName);\n\n  if (uri) {\n    const type = getExtension(name);\n    let width = undefined;\n    let height = undefined;\n    if (isImageType(type)) {\n      const size = await getSizeAsync(uri);\n      width = size.width;\n      height = size.height;\n    }\n\n    return new Asset({ name, type, hash, uri, width, height });\n  }\n}\n\nexport default fromUriAsync;\n"]},"metadata":{},"sourceType":"module"}